Timer unit: 1e-06 s

Total time: 408.727 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtmpn.py
Function: forward at line 51

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    51                                               @profile
    52                                               def forward(self, cand_batch, tree_mess):
    53       200        211.0      1.1      0.0          fatoms,fbonds = [],[] 
    54       200        166.0      0.8      0.0          in_bonds,all_bonds = [],[] 
    55       200       8598.0     43.0      0.0          mess_dict,all_mess = {},[create_var(cuda(torch.zeros(self.hidden_size)))] #Ensure index 0 is vec(0)
    56       200        197.0      1.0      0.0          total_atoms = 0
    57       200        157.0      0.8      0.0          scope = []
    58                                           
    59    107372      81959.0      0.8      0.0          for e,vec in tree_mess.items():
    60    107172      90375.0      0.8      0.0              mess_dict[e] = len(all_mess)
    61    107172      85909.0      0.8      0.0              all_mess.append(vec)
    62                                           
    63    170503     164263.0      1.0      0.0          for mol,all_nodes,ctr_node in cand_batch:
    64    170303     382002.0      2.2      0.1              n_atoms = mol.GetNumAtoms()
    65    170303     157138.0      0.9      0.0              ctr_bid = ctr_node.idx
    66                                           
    67   1954519   18760091.0      9.6      4.6              for atom in mol.GetAtoms():
    68   1784216   58032520.0     32.5     14.2                  fatoms.append( atom_features(atom) )
    69   1784216    2003983.0      1.1      0.5                  in_bonds.append([]) 
    70                                                   
    71   2068468   21471056.0     10.4      5.3              for bond in mol.GetBonds():
    72   1898165    2970280.0      1.6      0.7                  a1 = bond.GetBeginAtom()
    73   1898165    2161125.0      1.1      0.5                  a2 = bond.GetEndAtom()
    74   1898165    2392321.0      1.3      0.6                  x = a1.GetIdx() + total_atoms
    75   1898165    1937366.0      1.0      0.5                  y = a2.GetIdx() + total_atoms
    76                                                           #Here x_nid,y_nid could be 0
    77   1898165    2818518.0      1.5      0.7                  x_nid,y_nid = a1.GetAtomMapNum(),a2.GetAtomMapNum()
    78   1898165    2040670.0      1.1      0.5                  x_bid = all_nodes[x_nid - 1].idx if x_nid > 0 else -1
    79   1898165    1660574.0      0.9      0.4                  y_bid = all_nodes[y_nid - 1].idx if y_nid > 0 else -1
    80                                           
    81   1898165   55413948.0     29.2     13.6                  bfeature = bond_features(bond)
    82                                           
    83   1898165    2670557.0      1.4      0.7                  b = len(all_mess) + len(all_bonds)  #bond idx offseted by len(all_mess)
    84   1898165    1899331.0      1.0      0.5                  all_bonds.append((x,y))
    85   1898165   45786425.0     24.1     11.2                  fbonds.append( torch.cat([fatoms[x], bfeature], 0) )
    86   1898165    2477977.0      1.3      0.6                  in_bonds[y].append(b)
    87                                           
    88   1898165    2184085.0      1.2      0.5                  b = len(all_mess) + len(all_bonds)
    89   1898165    1779195.0      0.9      0.4                  all_bonds.append((y,x))
    90   1898165   41868273.0     22.1     10.2                  fbonds.append( torch.cat([fatoms[y], bfeature], 0) )
    91   1898165    2264553.0      1.2      0.6                  in_bonds[x].append(b)
    92                                           
    93                                                           # FIXME: https://github.com/wengong-jin/icml18-jtnn/issues/19
    94   1898165    1832321.0      1.0      0.4                  if x_bid >= 0 and y_bid >= 0 and x_bid != y_bid:
    95    449880     527201.0      1.2      0.1                      if (x_bid,y_bid) in mess_dict:
    96    447940     425964.0      1.0      0.1                          mess_idx = mess_dict[(x_bid,y_bid)]
    97    447940     386396.0      0.9      0.1                          in_bonds[y].append(mess_idx)
    98    449880     405612.0      0.9      0.1                      if (y_bid,x_bid) in mess_dict:
    99    447940     374989.0      0.8      0.1                          mess_idx = mess_dict[(y_bid,x_bid)]
   100    447940     371756.0      0.8      0.1                          in_bonds[x].append(mess_idx)
   101                                                       
   102    170303     272726.0      1.6      0.1              scope.append((total_atoms,n_atoms))
   103    170303     172896.0      1.0      0.0              total_atoms += n_atoms
   104                                                   
   105       200        211.0      1.1      0.0          total_bonds = len(all_bonds)
   106       200        165.0      0.8      0.0          total_mess = len(all_mess)
   107       200    6313249.0  31566.2      1.5          fatoms = torch.stack(fatoms, 0)
   108       200   14188429.0  70942.1      3.5          fbonds = torch.stack(fbonds, 0)
   109       200     190310.0    951.5      0.0          agraph = torch.zeros(total_atoms,MAX_NB).long()
   110       200      80062.0    400.3      0.0          bgraph = torch.zeros(total_bonds,MAX_NB).long()
   111       200     382361.0   1911.8      0.1          tree_message = torch.stack(all_mess, dim=0)
   112                                           
   113   1784416    1414878.0      0.8      0.3          for a in range(total_atoms):
   114   6476426    6614907.0      1.0      1.6              for i,b in enumerate(in_bonds[a]):
   115   4692210   24295311.0      5.2      5.9                  agraph[a,i] = b
   116                                           
   117   3796530    3003084.0      0.8      0.7          for b1 in range(total_bonds):
   118   3796330    3145000.0      0.8      0.8              x,y = all_bonds[b1]
   119  15087209   14496371.0      1.0      3.5              for i,b2 in enumerate(in_bonds[x]): #b2 is offseted by len(all_mess)
   120  11290879   10383724.0      0.9      2.5                  if b2 < total_mess or all_bonds[b2-total_mess][0] != y:
   121   7494549   39154276.0      5.2      9.6                      bgraph[b1,i] = b2
   122                                           
   123       200     302903.0   1514.5      0.1          atom_hiddens = self.run(fatoms, fbonds, agraph, bgraph, tree_message)
   124                                                   
   125       200        198.0      1.0      0.0          mol_vecs = []
   126    170503     165539.0      1.0      0.0          for st,le in scope:
   127    170303    5463977.0     32.1      1.3              mol_vec = atom_hiddens.narrow(0, st, le).sum(dim=0) / le
   128    170303     210625.0      1.2      0.1              mol_vecs.append(mol_vec)
   129                                           
   130       200     587156.0   2935.8      0.1          mol_vecs = torch.stack(mol_vecs, dim=0)
   131       200        297.0      1.5      0.0          return mol_vecs

Total time: 0.296187 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtmpn.py
Function: run at line 133

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   133                                               @profile
   134                                               def run(self, fatoms, fbonds, agraph, bgraph, tree_message):
   135       200       1062.0      5.3      0.4          fatoms = create_var(fatoms)
   136       200        250.0      1.2      0.1          fbonds = create_var(fbonds)
   137       200      46374.0    231.9     15.7          agraph = create_var(cuda(agraph))
   138       200      67565.0    337.8     22.8          bgraph = create_var(cuda(bgraph))
   139                                           
   140       200      16544.0     82.7      5.6          binput = self.W_i(fbonds)
   141       200      18765.0     93.8      6.3          graph_message = nn.ReLU()(binput)
   142                                           
   143       600        891.0      1.5      0.3          for i in range(self.depth - 1):
   144       400      16472.0     41.2      5.6              message = torch.cat([tree_message,graph_message], dim=0)
   145       400      18245.0     45.6      6.2              nei_message = index_select_ND(message, 0, bgraph)
   146       400       9607.0     24.0      3.2              nei_message = nei_message.sum(dim=1)
   147       400      16571.0     41.4      5.6              nei_message = self.W_h(nei_message)
   148       400      36076.0     90.2     12.2              graph_message = nn.ReLU()(binput + nei_message)
   149                                           
   150       200       6376.0     31.9      2.2          message = torch.cat([tree_message,graph_message], dim=0)
   151       200       6810.0     34.0      2.3          nei_message = index_select_ND(message, 0, agraph)
   152       200       3793.0     19.0      1.3          nei_message = nei_message.sum(dim=1)
   153       200       5468.0     27.3      1.8          ainput = torch.cat([fatoms, nei_message], dim=1)
   154       200      25160.0    125.8      8.5          atom_hiddens = nn.ReLU()(self.W_o(ainput))
   155                                           
   156       200        158.0      0.8      0.1          return atom_hiddens

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtmpn.py
Function: mol2dgl at line 159

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   159                                           @profile
   160                                           def mol2dgl(cand_batch, mol_tree_batch):
   161                                               cand_graphs = []
   162                                               tree_mess_source_edges = [] # map these edges from trees to...
   163                                               tree_mess_target_edges = [] # these edges on candidate graphs
   164                                               tree_mess_target_nodes = []
   165                                               n_nodes = 0
   166                                           
   167                                               for mol, mol_tree, ctr_node_id in cand_batch:
   168                                                   atom_feature_list = []
   169                                                   bond_feature_list = []
   170                                                   ctr_node = mol_tree.nodes[ctr_node_id]
   171                                                   ctr_bid = ctr_node['idx']
   172                                                   g = DGLGraph()
   173                                           
   174                                                   for atom in mol.GetAtoms():
   175                                                       atom_feature_list.append(atom_features(atom))
   176                                                       g.add_node(atom.GetIdx())
   177                                           
   178                                                   for bond in mol.GetBonds():
   179                                                       a1 = bond.GetBeginAtom()
   180                                                       a2 = bond.GetEndAtom()
   181                                                       begin_idx = a1.GetIdx()
   182                                                       end_idx = a2.GetIdx()
   183                                                       features = bond_features(bond)
   184                                           
   185                                                       g.add_edge(begin_idx, end_idx)
   186                                                       bond_feature_list.append(features)
   187                                                       g.add_edge(end_idx, begin_idx)
   188                                                       bond_feature_list.append(features)
   189                                           
   190                                                       x_nid, y_nid = a1.GetAtomMapNum(), a2.GetAtomMapNum()
   191                                                       # Tree node ID in the batch
   192                                                       x_bid = mol_tree.nodes[x_nid - 1]['idx'] if x_nid > 0 else -1
   193                                                       y_bid = mol_tree.nodes[y_nid - 1]['idx'] if y_nid > 0 else -1
   194                                                       if x_bid >= 0 and y_bid >= 0 and x_bid != y_bid:
   195                                                           if (x_bid, y_bid) in mol_tree_batch.edge_list:
   196                                                               tree_mess_target_edges.append(
   197                                                                       (begin_idx + n_nodes, end_idx + n_nodes))
   198                                                               tree_mess_source_edges.append((x_bid, y_bid))
   199                                                               tree_mess_target_nodes.append(end_idx + n_nodes)
   200                                                           if (y_bid, x_bid) in mol_tree_batch.edge_list:
   201                                                               tree_mess_target_edges.append(
   202                                                                       (end_idx + n_nodes, begin_idx + n_nodes))
   203                                                               tree_mess_source_edges.append((y_bid, x_bid))
   204                                                               tree_mess_target_nodes.append(begin_idx + n_nodes)
   205                                           
   206                                                   n_nodes += len(g.nodes)
   207                                           
   208                                                   atom_x = torch.stack(atom_feature_list)
   209                                                   g.set_n_repr({'x': atom_x})
   210                                                   if len(bond_feature_list) > 0:
   211                                                       bond_x = torch.stack(bond_feature_list)
   212                                                       g.set_e_repr({
   213                                                           'x': bond_x,
   214                                                           'src_x': atom_x.new(len(bond_feature_list), ATOM_FDIM).zero_()
   215                                                       })
   216                                                   cand_graphs.append(g)
   217                                           
   218                                               return cand_graphs, tree_mess_source_edges, tree_mess_target_edges, \
   219                                                      tree_mess_target_nodes

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtmpn.py
Function: forward at line 311

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   311                                               @profile
   312                                               def forward(self, cand_batch, mol_tree_batch):
   313                                                   cand_graphs, tree_mess_src_edges, tree_mess_tgt_edges, tree_mess_tgt_nodes = \
   314                                                           mol2dgl(cand_batch, mol_tree_batch)
   315                                           
   316                                                   n_samples = len(cand_graphs)
   317                                           
   318                                                   cand_graphs = batch(cand_graphs)
   319                                                   cand_line_graph = line_graph(cand_graphs, no_backtracking=True)
   320                                           
   321                                                   n_nodes = len(cand_graphs.nodes)
   322                                                   n_edges = len(cand_graphs.edges)
   323                                           
   324                                                   cand_graphs = self.run(
   325                                                           cand_graphs, cand_line_graph, tree_mess_src_edges, tree_mess_tgt_edges,
   326                                                           tree_mess_tgt_nodes, mol_tree_batch)
   327                                           
   328                                                   cand_graphs = unbatch(cand_graphs)
   329                                                   g_repr = torch.stack([g.get_n_repr()['h'].mean(0) for g in cand_graphs], 0)
   330                                           
   331                                                   self.n_samples_total += n_samples
   332                                                   self.n_nodes_total += n_nodes
   333                                                   self.n_edges_total += n_edges
   334                                                   self.n_passes += 1
   335                                           
   336                                                   return g_repr

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtmpn.py
Function: run at line 338

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   338                                               @profile
   339                                               def run(self, cand_graphs, cand_line_graph, tree_mess_src_edges, tree_mess_tgt_edges,
   340                                                       tree_mess_tgt_nodes, mol_tree_batch):
   341                                                   n_nodes = len(cand_graphs.nodes)
   342                                           
   343                                                   cand_graphs.update_edge(
   344                                                       #*zip(*cand_graphs.edge_list),
   345                                                       edge_func=lambda src, dst, edge: {'src_x': src['x']},
   346                                                       batchable=True,
   347                                                   )
   348                                           
   349                                                   bond_features = cand_line_graph.get_n_repr()['x']
   350                                                   source_features = cand_line_graph.get_n_repr()['src_x']
   351                                                   features = torch.cat([source_features, bond_features], 1)
   352                                                   msg_input = self.W_i(features)
   353                                                   cand_line_graph.set_n_repr({
   354                                                       'msg_input': msg_input,
   355                                                       'msg': torch.relu(msg_input),
   356                                                       'accum_msg': torch.zeros_like(msg_input),
   357                                                   })
   358                                                   zero_node_state = bond_features.new(n_nodes, self.hidden_size).zero_()
   359                                                   cand_graphs.set_n_repr({
   360                                                       'm': zero_node_state.clone(),
   361                                                       'h': zero_node_state.clone(),
   362                                                   })
   363                                           
   364                                                   # TODO: context
   365                                                   if PAPER:
   366                                                       cand_graphs.set_e_repr({
   367                                                           'alpha': cuda(torch.zeros(len(cand_graphs.edge_list), self.hidden_size))
   368                                                       })
   369                                           
   370                                                       alpha = mol_tree_batch.get_e_repr(*zip(*tree_mess_src_edges))['m']
   371                                                       cand_graphs.set_e_repr({'alpha': alpha}, *zip(*tree_mess_tgt_edges))
   372                                                   else:
   373                                                       alpha = mol_tree_batch.get_e_repr(*zip(*tree_mess_src_edges))['m']
   374                                                       node_idx = (torch.LongTensor(tree_mess_tgt_nodes)
   375                                                                   .to(device=zero_node_state.device)[:, None]
   376                                                                   .expand_as(alpha))
   377                                                       node_alpha = zero_node_state.clone().scatter_add(0, node_idx, alpha)
   378                                                       cand_graphs.set_n_repr({'alpha': node_alpha})
   379                                                       cand_graphs.update_edge(
   380                                                           #*zip(*cand_graphs.edge_list),
   381                                                           edge_func=lambda src, dst, edge: {'alpha': src['alpha']},
   382                                                           batchable=True,
   383                                                       )
   384                                           
   385                                                   for i in range(self.depth - 1):
   386                                                       cand_line_graph.update_all(
   387                                                           mpn_loopy_bp_msg,
   388                                                           mpn_loopy_bp_reduce,
   389                                                           self.loopy_bp_updater,
   390                                                           True
   391                                                       )
   392                                           
   393                                                   cand_graphs.update_all(
   394                                                       mpn_gather_msg,
   395                                                       mpn_gather_reduce,
   396                                                       self.gather_updater,
   397                                                       True
   398                                                   )
   399                                           
   400                                                   return cand_graphs

Total time: 16.8578 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_dec.py
Function: forward at line 55

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    55                                               @profile
    56                                               def forward(self, mol_batch, mol_vec):
    57       200       6033.0     30.2      0.0          super_root = MolTreeNode("")
    58       200        355.0      1.8      0.0          super_root.idx = -1
    59                                           
    60                                                   #Initialize
    61       200        327.0      1.6      0.0          pred_hiddens,pred_mol_vecs,pred_targets = [],[],[]
    62       200        298.0      1.5      0.0          stop_hiddens,stop_targets = [],[]
    63       200        293.0      1.5      0.0          traces = []
    64      4200       6003.0      1.4      0.0          for mol_tree in mol_batch:
    65      4000       5760.0      1.4      0.0              s = []
    66      4000      96493.0     24.1      0.6              dfs(s, mol_tree.nodes[0], super_root)
    67      4000       6234.0      1.6      0.0              traces.append(s)
    68     61586      87626.0      1.4      0.5              for node in mol_tree.nodes:
    69     57586      86351.0      1.5      0.5                  node.neighbors = []
    70                                           
    71                                                   #Predict Root
    72       200      10967.0     54.8      0.1          pred_hiddens.append(create_var(cuda(torch.zeros(len(mol_batch),self.hidden_size))))
    73       200       2071.0     10.4      0.0          pred_targets.extend([mol_tree.nodes[0].wid for mol_tree in mol_batch])
    74       200        334.0      1.7      0.0          pred_mol_vecs.append(mol_vec) 
    75                                           
    76       200       1324.0      6.6      0.0          max_iter = max([len(tr) for tr in traces])
    77       200       5717.0     28.6      0.0          padding = create_var(cuda(torch.zeros(self.hidden_size)), False)
    78       200        380.0      1.9      0.0          h = {}
    79                                           
    80      8130      13582.0      1.7      0.1          for t in range(max_iter):
    81      7930      13323.0      1.7      0.1              prop_list = []
    82      7930      12294.0      1.6      0.1              batch_list = []
    83    166530     253483.0      1.5      1.5              for i,plist in enumerate(traces):
    84    158600     238282.0      1.5      1.4                  if t < len(plist):
    85    107172     167371.0      1.6      1.0                      prop_list.append(plist[t])
    86    107172     161569.0      1.5      1.0                      batch_list.append(i)
    87                                           
    88      7930      14274.0      1.8      0.1              cur_x = []
    89      7930      24096.0      3.0      0.1              cur_h_nei,cur_o_nei = [],[]
    90                                           
    91    115102     173522.0      1.5      1.0              for node_x,real_y,_ in prop_list:
    92                                                           #Neighbors for message passing (target not included)
    93    107172     293113.0      2.7      1.7                  cur_nei = [h[(node_y.idx,node_x.idx)] for node_y in node_x.neighbors if node_y.idx != real_y.idx]
    94    107172     167125.0      1.6      1.0                  pad_len = MAX_NB - len(cur_nei)
    95    107172     168426.0      1.6      1.0                  cur_h_nei.extend(cur_nei)
    96    107172     201447.0      1.9      1.2                  cur_h_nei.extend([padding] * pad_len)
    97                                           
    98                                                           #Neighbors for stop prediction (all neighbors)
    99    107172     253360.0      2.4      1.5                  cur_nei = [h[(node_y.idx,node_x.idx)] for node_y in node_x.neighbors]
   100    107172     164896.0      1.5      1.0                  pad_len = MAX_NB - len(cur_nei)
   101    107172     167570.0      1.6      1.0                  cur_o_nei.extend(cur_nei)
   102    107172     186472.0      1.7      1.1                  cur_o_nei.extend([padding] * pad_len)
   103                                           
   104                                                           #Current clique embedding
   105    107172     167537.0      1.6      1.0                  cur_x.append(node_x.wid)
   106                                           
   107                                                       #Clique embedding
   108      7930     234416.0     29.6      1.4              cur_x = create_var(cuda(torch.LongTensor(cur_x)))
   109      7930     297219.0     37.5      1.8              cur_x = self.embedding(cur_x)
   110                                           
   111                                                       #Message passing
   112      7930    2516007.0    317.3     14.9              cur_h_nei = torch.stack(cur_h_nei, dim=0).view(-1,MAX_NB,self.hidden_size)
   113      7930    4456982.0    562.0     26.4              new_h = GRU(cur_x, cur_h_nei, self.W_z, self.W_r, self.U_r, self.W_h)
   114                                           
   115                                                       #Node Aggregate
   116      7930    2540016.0    320.3     15.1              cur_o_nei = torch.stack(cur_o_nei, dim=0).view(-1,MAX_NB,self.hidden_size)
   117      7930     167432.0     21.1      1.0              cur_o = cur_o_nei.sum(dim=1)
   118                                           
   119                                                       #Gather targets
   120      7930      16114.0      2.0      0.1              pred_target,pred_list = [],[]
   121      7930      12406.0      1.6      0.1              stop_target = []
   122    115102     186654.0      1.6      1.1              for i,m in enumerate(prop_list):
   123    107172     158074.0      1.5      0.9                  node_x,node_y,direction = m
   124    107172     176941.0      1.7      1.0                  x,y = node_x.idx,node_y.idx
   125    107172     572837.0      5.3      3.4                  h[(x,y)] = new_h[i]
   126    107172     186534.0      1.7      1.1                  node_y.neighbors.append(node_x)
   127    107172     162369.0      1.5      1.0                  if direction == 1:
   128     53586      85297.0      1.6      0.5                      pred_target.append(node_y.wid)
   129     53586      82347.0      1.5      0.5                      pred_list.append(i) 
   130    107172     165306.0      1.5      1.0                  stop_target.append(direction)
   131                                           
   132                                                       #Hidden states for stop prediction
   133      7930     262960.0     33.2      1.6              cur_batch = create_var(cuda(torch.LongTensor(batch_list)))
   134      7930     162649.0     20.5      1.0              cur_mol_vec = mol_vec.index_select(0, cur_batch)
   135      7930     230384.0     29.1      1.4              stop_hidden = torch.cat([cur_x,cur_o,cur_mol_vec], dim=1)
   136      7930      16682.0      2.1      0.1              stop_hiddens.append( stop_hidden )
   137      7930      27777.0      3.5      0.2              stop_targets.extend( stop_target )
   138                                                       
   139                                                       #Hidden states for clique prediction
   140      7930      15494.0      2.0      0.1              if len(pred_list) > 0:
   141      5866      27740.0      4.7      0.2                  batch_list = [batch_list[i] for i in pred_list]
   142      5866     162320.0     27.7      1.0                  cur_batch = create_var(cuda(torch.LongTensor(batch_list)))
   143      5866     107255.0     18.3      0.6                  pred_mol_vecs.append( mol_vec.index_select(0, cur_batch) )
   144                                           
   145      5866     142719.0     24.3      0.8                  cur_pred = create_var(cuda(torch.LongTensor(pred_list)))
   146      5866      98306.0     16.8      0.6                  pred_hiddens.append( new_h.index_select(0, cur_pred) )
   147      5866      15508.0      2.6      0.1                  pred_targets.extend( pred_target )
   148                                           
   149                                                   #Last stop at root
   150       200        567.0      2.8      0.0          cur_x,cur_o_nei = [],[]
   151      4200       6305.0      1.5      0.0          for mol_tree in mol_batch:
   152      4000       6956.0      1.7      0.0              node_x = mol_tree.nodes[0]
   153      4000       6731.0      1.7      0.0              cur_x.append(node_x.wid)
   154      4000       9849.0      2.5      0.1              cur_nei = [h[(node_y.idx,node_x.idx)] for node_y in node_x.neighbors]
   155      4000       6324.0      1.6      0.0              pad_len = MAX_NB - len(cur_nei)
   156      4000       6346.0      1.6      0.0              cur_o_nei.extend(cur_nei)
   157      4000       7197.0      1.8      0.0              cur_o_nei.extend([padding] * pad_len)
   158                                           
   159       200       6008.0     30.0      0.0          cur_x = create_var(cuda(torch.LongTensor(cur_x)))
   160       200       7382.0     36.9      0.0          cur_x = self.embedding(cur_x)
   161       200      89151.0    445.8      0.5          cur_o_nei = torch.stack(cur_o_nei, dim=0).view(-1,MAX_NB,self.hidden_size)
   162       200       4367.0     21.8      0.0          cur_o = cur_o_nei.sum(dim=1)
   163                                           
   164       200       5439.0     27.2      0.0          stop_hidden = torch.cat([cur_x,cur_o,mol_vec], dim=1)
   165       200        430.0      2.1      0.0          stop_hiddens.append( stop_hidden )
   166       200        826.0      4.1      0.0          stop_targets.extend( [0] * len(mol_batch) )
   167                                           
   168                                                   #Predict next clique
   169       200      11707.0     58.5      0.1          pred_hiddens = torch.cat(pred_hiddens, dim=0)
   170       200      11035.0     55.2      0.1          pred_mol_vecs = torch.cat(pred_mol_vecs, dim=0)
   171       200       5321.0     26.6      0.0          pred_vecs = torch.cat([pred_hiddens, pred_mol_vecs], dim=1)
   172       200      26222.0    131.1      0.2          pred_vecs = nn.ReLU()(self.W(pred_vecs))
   173       200      10738.0     53.7      0.1          pred_scores = self.W_o(pred_vecs)
   174       200       9370.0     46.9      0.1          pred_targets = create_var(cuda(torch.LongTensor(pred_targets)))
   175                                           
   176       200      17892.0     89.5      0.1          pred_loss = self.pred_loss(pred_scores, pred_targets) / len(mol_batch)
   177       200       4866.0     24.3      0.0          _,preds = torch.max(pred_scores, dim=1)
   178       200       7237.0     36.2      0.0          pred_acc = torch.eq(preds, pred_targets).float()
   179       200      11369.0     56.8      0.1          pred_acc = torch.sum(pred_acc) / pred_targets.nelement()
   180                                           
   181                                                   #Predict stop
   182       200      13993.0     70.0      0.1          stop_hiddens = torch.cat(stop_hiddens, dim=0)
   183       200      25308.0    126.5      0.2          stop_vecs = nn.ReLU()(self.U(stop_hiddens))
   184       200      10719.0     53.6      0.1          stop_scores = self.U_s(stop_vecs).squeeze()
   185       200       9910.0     49.5      0.1          stop_targets = create_var(cuda(torch.Tensor(stop_targets)))
   186                                                   
   187       200      48905.0    244.5      0.3          stop_loss = self.stop_loss(stop_scores, stop_targets) / len(mol_batch)
   188       200       6211.0     31.1      0.0          stops = torch.ge(stop_scores, 0).float()
   189       200       5312.0     26.6      0.0          stop_acc = torch.eq(stops, stop_targets).float()
   190       200       9392.0     47.0      0.1          stop_acc = torch.sum(stop_acc) / stop_targets.nelement()
   191                                           
   192       200       3399.0     17.0      0.0          return pred_loss, stop_loss, pred_acc.data[0], stop_acc.data[0]

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_dec.py
Function: forward at line 398

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   398                                               @profile
   399                                               def forward(self, mol_trees, tree_vec):
   400                                                   '''
   401                                                   The training procedure which computes the prediction loss given the
   402                                                   ground truth tree
   403                                                   '''
   404                                                   mol_tree_batch = batch(mol_trees)
   405                                                   mol_tree_batch_lg = line_graph(mol_tree_batch, no_backtracking=True)
   406                                                   n_trees = len(mol_trees)
   407                                           
   408                                                   return self.run(mol_tree_batch, mol_tree_batch_lg, n_trees, tree_vec)

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_dec.py
Function: run at line 410

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   410                                               @profile
   411                                               def run(self, mol_tree_batch, mol_tree_batch_lg, n_trees, tree_vec):
   412                                                   root_ids = mol_tree_batch.node_offset[:-1]
   413                                                   n_nodes = len(mol_tree_batch.nodes)
   414                                                   edge_list = mol_tree_batch.edge_list
   415                                                   n_edges = len(edge_list)
   416                                           
   417                                                   mol_tree_batch.set_n_repr({
   418                                                       'x': self.embedding(mol_tree_batch.get_n_repr()['wid']),
   419                                                       'h': cuda(torch.zeros(n_nodes, self.hidden_size)),
   420                                                       'new': cuda(torch.ones(n_nodes).byte()),  # whether it's newly generated node
   421                                                   })
   422                                           
   423                                                   mol_tree_batch.set_e_repr({
   424                                                       's': cuda(torch.zeros(n_edges, self.hidden_size)),
   425                                                       'm': cuda(torch.zeros(n_edges, self.hidden_size)),
   426                                                       'r': cuda(torch.zeros(n_edges, self.hidden_size)),
   427                                                       'z': cuda(torch.zeros(n_edges, self.hidden_size)),
   428                                                       'src_x': cuda(torch.zeros(n_edges, self.hidden_size)),
   429                                                       'dst_x': cuda(torch.zeros(n_edges, self.hidden_size)),
   430                                                       'rm': cuda(torch.zeros(n_edges, self.hidden_size)),
   431                                                       'accum_rm': cuda(torch.zeros(n_edges, self.hidden_size)),
   432                                                   })
   433                                           
   434                                                   mol_tree_batch.update_edge(
   435                                                       #*zip(*edge_list),
   436                                                       edge_func=lambda src, dst, edge: {'src_x': src['x'], 'dst_x': dst['x']},
   437                                                       batchable=True,
   438                                                   )
   439                                           
   440                                                   # input tensors for stop prediction (p) and label prediction (q)
   441                                                   p_inputs = []
   442                                                   p_targets = []
   443                                                   q_inputs = []
   444                                                   q_targets = []
   445                                           
   446                                                   # Predict root
   447                                                   mol_tree_batch.pull(
   448                                                       root_ids,
   449                                                       dec_tree_node_msg,
   450                                                       dec_tree_node_reduce,
   451                                                       dec_tree_node_update,
   452                                                       batchable=True,
   453                                                   )
   454                                                   # Extract hidden states and store them for stop/label prediction
   455                                                   h = mol_tree_batch.get_n_repr(root_ids)['h']
   456                                                   x = mol_tree_batch.get_n_repr(root_ids)['x']
   457                                                   p_inputs.append(torch.cat([x, h, tree_vec], 1))
   458                                                   t_set = list(range(len(root_ids)))
   459                                                   q_inputs.append(torch.cat([h, tree_vec], 1))
   460                                                   q_targets.append(mol_tree_batch.get_n_repr(root_ids)['wid'])
   461                                           
   462                                                   # Traverse the tree and predict on children
   463                                                   for u, v, i, p in dfs_order(mol_tree_batch, root_ids):
   464                                                       assert set(t_set).issuperset(i)
   465                                                       ip = dict(zip(i, p))
   466                                                       # TODO: context
   467                                                       p_targets.append(cuda(torch.tensor([ip.get(_i, 0) for _i in t_set])))
   468                                                       t_set = list(i)
   469                                                       eid = mol_tree_batch.get_edge_id(u, v)
   470                                                       mol_tree_batch_lg.pull(
   471                                                           eid,
   472                                                           dec_tree_edge_msg,
   473                                                           dec_tree_edge_reduce,
   474                                                           self.dec_tree_edge_update,
   475                                                           batchable=True,
   476                                                       )
   477                                                       is_new = mol_tree_batch.get_n_repr(v)['new']
   478                                                       mol_tree_batch.pull(
   479                                                           v,
   480                                                           dec_tree_node_msg,
   481                                                           dec_tree_node_reduce,
   482                                                           dec_tree_node_update,
   483                                                           batchable=True,
   484                                                       )
   485                                                       # Extract
   486                                                       h = mol_tree_batch.get_n_repr(v)['h']
   487                                                       x = mol_tree_batch.get_n_repr(v)['x']
   488                                                       p_inputs.append(torch.cat([x, h, tree_vec[t_set]], 1))
   489                                                       # Only newly generated nodes are needed for label prediction
   490                                                       # NOTE: The following works since the uncomputed messages are zeros.
   491                                                       q_inputs.append(torch.cat([h[is_new], tree_vec[t_set][is_new]], 1))
   492                                                       q_targets.append(mol_tree_batch.get_n_repr(v)['wid'][is_new])
   493                                                   p_targets.append(cuda(torch.tensor([0 for _ in t_set])))
   494                                           
   495                                                   # Batch compute the stop/label prediction losses
   496                                                   p_inputs = torch.cat(p_inputs, 0)
   497                                                   p_targets = torch.cat(p_targets, 0)
   498                                                   q_inputs = torch.cat(q_inputs, 0)
   499                                                   q_targets = torch.cat(q_targets, 0)
   500                                           
   501                                                   q = self.W_o(torch.relu(self.W(q_inputs)))
   502                                                   p = self.U_s(torch.relu(self.U(p_inputs)))[:, 0]
   503                                           
   504                                                   p_loss = F.binary_cross_entropy_with_logits(
   505                                                       p, p_targets.float(), size_average=False
   506                                                   ) / n_trees
   507                                                   q_loss = F.cross_entropy(q, q_targets, size_average=False) / n_trees
   508                                                   p_acc = ((p > 0).long() == p_targets).sum().float() / p_targets.shape[0]
   509                                                   q_acc = (q.max(1)[1] == q_targets).float().sum() / q_targets.shape[0]
   510                                           
   511                                                   return q_loss, p_loss, q_acc, p_acc

Total time: 6.65996 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_enc.py
Function: forward at line 33

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                               @profile
    34                                               def forward(self, root_batch):
    35       200        187.0      0.9      0.0          orders = []
    36      4200       3020.0      0.7      0.0          for root in root_batch:
    37      4000     188624.0     47.2      2.8              order = get_prop_order(root)
    38      4000       3481.0      0.9      0.1              orders.append(order)
    39                                                   
    40       200        206.0      1.0      0.0          h = {}
    41       200       1190.0      6.0      0.0          max_depth = max([len(x) for x in orders])
    42       200      16271.0     81.4      0.2          padding = create_var(cuda(torch.zeros(self.hidden_size)), False)
    43                                           
    44      5894       5052.0      0.9      0.1          for t in range(max_depth):
    45      5694       5241.0      0.9      0.1              prop_list = []
    46    119574      84410.0      0.7      1.3              for order in orders:
    47    113880      86638.0      0.8      1.3                  if t < len(order):
    48     76042      66941.0      0.9      1.0                      prop_list.extend(order[t])
    49                                           
    50      5694       5435.0      1.0      0.1              cur_x = []
    51      5694       6258.0      1.1      0.1              cur_h_nei = []
    52    112866      80424.0      0.7      1.2              for node_x,node_y in prop_list:
    53    107172      90598.0      0.8      1.4                  x,y = node_x.idx,node_y.idx
    54    107172      85671.0      0.8      1.3                  cur_x.append(node_x.wid)
    55                                           
    56    107172      76523.0      0.7      1.1                  h_nei = []
    57    339494     247685.0      0.7      3.7                  for node_z in node_x.neighbors:
    58    232322     169327.0      0.7      2.5                      z = node_z.idx
    59    232322     165316.0      0.7      2.5                      if z == y: continue
    60    125150     109548.0      0.9      1.6                      h_nei.append(h[(z,x)])
    61                                           
    62    107172      83091.0      0.8      1.2                  pad_len = MAX_NB - len(h_nei)
    63    107172     105401.0      1.0      1.6                  h_nei.extend([padding] * pad_len)
    64    107172      85412.0      0.8      1.3                  cur_h_nei.extend(h_nei)
    65                                           
    66      5694     189714.0     33.3      2.8              cur_x = cuda(torch.LongTensor(cur_x))
    67      5694     211356.0     37.1      3.2              cur_x = self.embedding(cur_x)
    68      5694     393772.0     69.2      5.9              cur_h_nei = torch.cat(cur_h_nei, dim=0).view(-1,MAX_NB,self.hidden_size)
    69                                           
    70      5694    3296533.0    578.9     49.5              new_h = GRU(cur_x, cur_h_nei, self.W_z, self.W_r, self.U_r, self.W_h)
    71    112866     101071.0      0.9      1.5              for i,m in enumerate(prop_list):
    72    107172     102496.0      1.0      1.5                  x,y = m[0].idx,m[1].idx
    73    107172     508877.0      4.7      7.6                  h[(x,y)] = new_h[i]
    74                                           
    75       200      83909.0    419.5      1.3          root_vecs = node_aggregate(root_batch, h, self.embedding, self.W)
    76                                           
    77       200        278.0      1.4      0.0          return h, root_vecs

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_enc.py
Function: forward at line 201

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   201                                               @profile
   202                                               def forward(self, mol_trees):
   203                                                   mol_tree_batch = batch(mol_trees)
   204                                                   
   205                                                   # Build line graph to prepare for belief propagation
   206                                                   mol_tree_batch_lg = line_graph(mol_tree_batch, no_backtracking=True)
   207                                           
   208                                                   return self.run(mol_tree_batch, mol_tree_batch_lg)

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_enc.py
Function: run at line 210

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   210                                               @profile
   211                                               def run(self, mol_tree_batch, mol_tree_batch_lg):
   212                                                   # Since tree roots are designated to 0.  In the batched graph we can
   213                                                   # simply find the corresponding node ID by looking at node_offset
   214                                                   root_ids = mol_tree_batch.node_offset[:-1]
   215                                                   n_nodes = len(mol_tree_batch.nodes)
   216                                                   edge_list = mol_tree_batch.edge_list
   217                                                   n_edges = len(edge_list)
   218                                           
   219                                                   # Assign structure embeddings to tree nodes
   220                                                   mol_tree_batch.set_n_repr({
   221                                                       'x': self.embedding(mol_tree_batch.get_n_repr()['wid']),
   222                                                       'h': cuda(torch.zeros(n_nodes, self.hidden_size)),
   223                                                   })
   224                                           
   225                                                   # Initialize the intermediate variables according to Eq (4)-(8).
   226                                                   # Also initialize the src_x and dst_x fields.
   227                                                   # TODO: context?
   228                                                   mol_tree_batch.set_e_repr({
   229                                                       's': cuda(torch.zeros(n_edges, self.hidden_size)),
   230                                                       'm': cuda(torch.zeros(n_edges, self.hidden_size)),
   231                                                       'r': cuda(torch.zeros(n_edges, self.hidden_size)),
   232                                                       'z': cuda(torch.zeros(n_edges, self.hidden_size)),
   233                                                       'src_x': cuda(torch.zeros(n_edges, self.hidden_size)),
   234                                                       'dst_x': cuda(torch.zeros(n_edges, self.hidden_size)),
   235                                                       'rm': cuda(torch.zeros(n_edges, self.hidden_size)),
   236                                                       'accum_rm': cuda(torch.zeros(n_edges, self.hidden_size)),
   237                                                   })
   238                                           
   239                                                   # Send the source/destination node features to edges
   240                                                   mol_tree_batch.update_edge(
   241                                                       #*zip(*edge_list),
   242                                                       edge_func=lambda src, dst, edge: {'src_x': src['x'], 'dst_x': dst['x']},
   243                                                       batchable=True,
   244                                                   )
   245                                           
   246                                                   # Message passing
   247                                                   # I exploited the fact that the reduce function is a sum of incoming
   248                                                   # messages, and the uncomputed messages are zero vectors.  Essentially,
   249                                                   # we can always compute s_ij as the sum of incoming m_ij, no matter
   250                                                   # if m_ij is actually computed or not.
   251                                                   for u, v in level_order(mol_tree_batch, root_ids):
   252                                                       eid = mol_tree_batch.get_edge_id(u, v)
   253                                                       mol_tree_batch_lg.pull(
   254                                                           eid,
   255                                                           enc_tree_msg,
   256                                                           enc_tree_reduce,
   257                                                           self.enc_tree_update,
   258                                                           batchable=True,
   259                                                       )
   260                                           
   261                                                   # Readout
   262                                                   mol_tree_batch.update_all(
   263                                                       enc_tree_gather_msg,
   264                                                       enc_tree_gather_reduce,
   265                                                       self.enc_tree_gather_update,
   266                                                       batchable=True,
   267                                                   )
   268                                           
   269                                                   root_vecs = mol_tree_batch.get_n_repr(root_ids)['h']
   270                                           
   271                                                   return mol_tree_batch, root_vecs

Total time: 33.9245 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: encode at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                               @profile
    63                                               def encode(self, mol_batch):
    64       200      66753.0    333.8      0.2          set_batch_nodeID(mol_batch, self.vocab)
    65       200       1181.0      5.9      0.0          root_batch = [mol_tree.nodes[0] for mol_tree in mol_batch]
    66       200    8517751.0  42588.8     25.1          tree_mess,tree_vec = self.jtnn(root_batch)
    67                                           
    68       200       1541.0      7.7      0.0          smiles_batch = [mol_tree.smiles for mol_tree in mol_batch]
    69       200   25337087.0 126685.4     74.7          mol_vec = self.mpn(mol2graph(smiles_batch))
    70       200        148.0      0.7      0.0          return tree_mess, tree_vec, mol_vec

Total time: 561.648 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: forward at line 82

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    82                                               @profile
    83                                               def forward(self, mol_batch, beta=0, e1=None, e2=None):
    84       200        224.0      1.1      0.0          batch_size = len(mol_batch)
    85                                           
    86       200   33926687.0 169633.4      6.0          tree_mess, tree_vec, mol_vec = self.encode(mol_batch)
    87                                           
    88       200      10746.0     53.7      0.0          tree_mean = self.T_mean(tree_vec)
    89       200      14766.0     73.8      0.0          tree_log_var = -torch.abs(self.T_var(tree_vec)) #Following Mueller et al.
    90       200       8963.0     44.8      0.0          mol_mean = self.G_mean(mol_vec)
    91       200      13230.0     66.2      0.0          mol_log_var = -torch.abs(self.G_var(mol_vec)) #Following Mueller et al.
    92                                           
    93       200       5997.0     30.0      0.0          z_mean = torch.cat([tree_mean,mol_mean], dim=1)
    94       200       4795.0     24.0      0.0          z_log_var = torch.cat([tree_log_var,mol_log_var], dim=1)
    95       200      29713.0    148.6      0.0          kl_loss = -0.5 * torch.sum(1.0 + z_log_var - z_mean * z_mean - torch.exp(z_log_var)) / batch_size
    96                                           
    97       200      10188.0     50.9      0.0          epsilon = create_var(cuda(torch.randn(batch_size, self.latent_size // 2)), False) if e1 is None else e1
    98       200      15456.0     77.3      0.0          tree_vec = tree_mean + torch.exp(tree_log_var // 2) * epsilon
    99       200       7008.0     35.0      0.0          epsilon = create_var(cuda(torch.randn(batch_size, self.latent_size // 2)), False) if e2 is None else e2
   100       200      14013.0     70.1      0.0          mol_vec = mol_mean + torch.exp(mol_log_var // 2) * epsilon
   101                                                   
   102       200   22240128.0 111200.6      4.0          word_loss, topo_loss, word_acc, topo_acc = self.decoder(mol_batch, tree_vec)
   103       200  498166157.0 2490830.8     88.7          assm_loss, assm_acc = self.assm(mol_batch, mol_vec, tree_mess)
   104       200    7156366.0  35781.8      1.3          stereo_loss, stereo_acc = self.stereo(mol_batch, mol_vec)
   105                                           
   106       200       6721.0     33.6      0.0          all_vec = torch.cat([tree_vec, mol_vec], dim=1)
   107       200      14800.0     74.0      0.0          loss = word_loss + topo_loss + assm_loss + 2 * stereo_loss + beta * kl_loss 
   108                                           
   109       200       1839.0      9.2      0.0          return loss, kl_loss.data[0], word_acc, topo_acc, assm_acc, stereo_acc

Total time: 497.849 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: assm at line 111

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   111                                               @profile
   112                                               def assm(self, mol_batch, mol_vec, tree_mess):
   113       200        223.0      1.1      0.0          cands = []
   114       200        160.0      0.8      0.0          batch_idx = []
   115      4200       3685.0      0.9      0.0          for i,mol_tree in enumerate(mol_batch):
   116     61586      49428.0      0.8      0.0              for node in mol_tree.nodes:
   117                                                           #Leaf node's attachment is determined by neighboring node's attachment
   118     57586      55494.0      1.0      0.0                  if node.is_leaf or len(node.cands) == 1: continue
   119     16794      63983.0      3.8      0.0                  cands.extend( [(cand, mol_tree.nodes, node) for cand in node.cand_mols] )
   120     16794      21322.0      1.3      0.0                  batch_idx.extend([i] * len(node.cands))
   121                                           
   122       200  494396006.0 2471980.0     99.3          cand_vec = self.jtmpn(cands, tree_mess)
   123       200      45805.0    229.0      0.0          cand_vec = self.G_mean(cand_vec)
   124                                           
   125       200      19697.0     98.5      0.0          batch_idx = create_var(cuda(torch.LongTensor(batch_idx)))
   126       200       4647.0     23.2      0.0          mol_vec = mol_vec.index_select(0, batch_idx)
   127                                           
   128       200       2833.0     14.2      0.0          mol_vec = mol_vec.view(-1, 1, self.latent_size // 2)
   129       200       1010.0      5.0      0.0          cand_vec = cand_vec.view(-1, self.latent_size // 2, 1)
   130       200       6378.0     31.9      0.0          scores = torch.bmm(mol_vec, cand_vec).squeeze()
   131                                                   
   132       200        225.0      1.1      0.0          cnt,tot,acc = 0,0,0
   133       200        222.0      1.1      0.0          all_loss = []
   134      4200       4709.0      1.1      0.0          for i,mol_tree in enumerate(mol_batch):
   135      4000      33390.0      8.3      0.0              comp_nodes = [node for node in mol_tree.nodes if len(node.cands) > 1 and not node.is_leaf]
   136      4000       4606.0      1.2      0.0              cnt += len(comp_nodes)
   137     20794      25021.0      1.2      0.0              for node in comp_nodes:
   138     16794      31944.0      1.9      0.0                  label = node.cands.index(node.label)
   139     16794      16766.0      1.0      0.0                  ncand = len(node.cands)
   140     16794     137864.0      8.2      0.0                  cur_score = scores.narrow(0, tot, ncand)
   141     16794      17126.0      1.0      0.0                  tot += ncand
   142                                           
   143     16794    1196581.0     71.3      0.2                  if cur_score.data[label] >= cur_score.max().data[0]:
   144      7936      10873.0      1.4      0.0                      acc += 1
   145                                           
   146     16794     453834.0     27.0      0.1                  label = create_var(cuda(torch.LongTensor([label])))
   147     16794    1051013.0     62.6      0.2                  all_loss.append( self.assm_loss(cur_score.view(1,-1), label) )
   148                                                   
   149                                                   #all_loss = torch.stack(all_loss).sum() / len(mol_batch)
   150       200     193360.0    966.8      0.0          all_loss = sum(all_loss) / len(mol_batch)
   151       200        540.0      2.7      0.0          return all_loss, acc * 1.0 / cnt

Total time: 7.14262 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: stereo at line 153

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   153                                               @profile
   154                                               def stereo(self, mol_batch, mol_vec):
   155       200        209.0      1.0      0.0          stereo_cands,batch_idx = [],[]
   156       200        135.0      0.7      0.0          labels = []
   157      4200       2736.0      0.7      0.0          for i,mol_tree in enumerate(mol_batch):
   158      4000       2675.0      0.7      0.0              cands = mol_tree.stereo_cands
   159      4000       2540.0      0.6      0.0              if len(cands) == 1: continue
   160       274        353.0      1.3      0.0              if mol_tree.smiles3D not in cands:
   161        12         12.0      1.0      0.0                  cands.append(mol_tree.smiles3D)
   162       274        253.0      0.9      0.0              stereo_cands.extend(cands)
   163       274        370.0      1.4      0.0              batch_idx.extend([i] * len(cands))
   164       274        317.0      1.2      0.0              labels.append( (cands.index(mol_tree.smiles3D), len(cands)) )
   165                                           
   166       200        137.0      0.7      0.0          if len(labels) == 0: 
   167        51       1937.0     38.0      0.0              return create_var(cuda(torch.tensor(0.))), 1.0
   168                                           
   169       149       6057.0     40.7      0.1          batch_idx = create_var(cuda(torch.LongTensor(batch_idx)))
   170       149    7028463.0  47170.9     98.4          stereo_cands = self.mpn(mol2graph(stereo_cands))
   171       149       7818.0     52.5      0.1          stereo_cands = self.G_mean(stereo_cands)
   172       149       2732.0     18.3      0.0          stereo_labels = mol_vec.index_select(0, batch_idx)
   173       149      24612.0    165.2      0.3          scores = torch.nn.CosineSimilarity()(stereo_cands, stereo_labels)
   174                                           
   175       149        156.0      1.0      0.0          st,acc = 0,0
   176       149        114.0      0.8      0.0          all_loss = []
   177       423        388.0      0.9      0.0          for label,le in labels:
   178       274       2131.0      7.8      0.0              cur_scores = scores.narrow(0, st, le)
   179       274      23752.0     86.7      0.3              if cur_scores.data[label] >= cur_scores.max().data[0]: 
   180        96        126.0      1.3      0.0                  acc += 1
   181       274       8615.0     31.4      0.1              label = create_var(cuda(torch.LongTensor([label])))
   182       274      19174.0     70.0      0.3              all_loss.append( self.stereo_loss(cur_scores.view(1,-1), label) )
   183       274        328.0      1.2      0.0              st += le
   184                                                   #all_loss = torch.cat(all_loss).sum() / len(labels)
   185       149       6165.0     41.4      0.1          all_loss = sum(all_loss) / len(labels)
   186       149        313.0      2.1      0.0          return all_loss, acc * 1.0 / len(labels)

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: encode at line 358

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   358                                               @profile
   359                                               def encode(self, mol_batch):
   360                                                   dgl_set_batch_nodeID(mol_batch, self.vocab)
   361                                           
   362                                                   smiles_batch = [mol_tree.smiles for mol_tree in mol_batch]
   363                                                   mol_graphs = mol2dgl(smiles_batch)
   364                                                   mol_vec = self.mpn(mol_graphs)
   365                                                   # mol_batch is a junction tree
   366                                                   mol_tree_batch, tree_vec = self.jtnn(mol_batch)
   367                                           
   368                                                   self.n_nodes_total += sum(len(g.nodes) for g in mol_graphs)
   369                                                   self.n_edges_total += sum(len(g.edges) for g in mol_graphs)
   370                                                   self.n_tree_nodes_total += sum(len(t.nodes) for t in mol_batch)
   371                                                   self.n_passes += 1
   372                                           
   373                                                   return mol_tree_batch, tree_vec, mol_vec

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: forward at line 375

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   375                                               @profile
   376                                               def forward(self, mol_batch, beta=0, e1=None, e2=None):
   377                                                   batch_size = len(mol_batch)
   378                                           
   379                                                   mol_tree_batch, tree_vec, mol_vec = self.encode(mol_batch)
   380                                           
   381                                                   tree_mean = self.T_mean(tree_vec)
   382                                                   tree_log_var = -torch.abs(self.T_var(tree_vec))
   383                                                   mol_mean = self.G_mean(mol_vec)
   384                                                   mol_log_var = -torch.abs(self.G_var(mol_vec))
   385                                           
   386                                                   self.tree_mean = tree_mean
   387                                                   self.tree_log_var = tree_log_var
   388                                                   self.mol_mean = mol_mean
   389                                                   self.mol_log_var = mol_log_var
   390                                           
   391                                                   z_mean = torch.cat([tree_mean, mol_mean], dim=1)
   392                                                   z_log_var = torch.cat([tree_log_var, mol_log_var], dim=1)
   393                                                   kl_loss = -0.5 * torch.sum(1.0 + z_log_var - z_mean * z_mean - torch.exp(z_log_var)) / batch_size
   394                                           
   395                                                   self.z_mean = z_mean
   396                                                   self.z_log_var = z_log_var
   397                                           
   398                                                   epsilon = cuda(torch.randn(batch_size, self.latent_size // 2)) if e1 is None else e1
   399                                                   tree_vec = tree_mean + torch.exp(tree_log_var // 2) * epsilon
   400                                                   epsilon = cuda(torch.randn(batch_size, self.latent_size // 2)) if e2 is None else e2
   401                                                   mol_vec = mol_mean + torch.exp(mol_log_var // 2) * epsilon
   402                                           
   403                                                   self.tree_vec = tree_vec
   404                                                   self.mol_vec = mol_vec
   405                                           
   406                                                   word_loss, topo_loss, word_acc, topo_acc = self.decoder(mol_batch, tree_vec)
   407                                                   assm_loss, assm_acc = self.assm(mol_batch, mol_tree_batch, mol_vec)
   408                                                   stereo_loss, stereo_acc = self.stereo(mol_batch, mol_vec)
   409                                           
   410                                                   self.word_loss_v = word_loss
   411                                                   self.topo_loss_v = topo_loss
   412                                                   self.assm_loss_v = assm_loss
   413                                                   self.stereo_loss_v = stereo_loss
   414                                           
   415                                                   all_vec = torch.cat([tree_vec, mol_vec], dim=1)
   416                                                   loss = word_loss + topo_loss + assm_loss + 2 * stereo_loss + beta * kl_loss
   417                                           
   418                                                   self.all_vec = all_vec
   419                                           
   420                                                   return loss, kl_loss, word_acc, topo_acc, assm_acc, stereo_acc

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: assm at line 422

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   422                                               @profile
   423                                               def assm(self, mol_batch, mol_tree_batch, mol_vec):
   424                                                   cands = []
   425                                                   batch_idx = []
   426                                           
   427                                                   for i, mol_tree in enumerate(mol_batch):
   428                                                       for node_id, node in mol_tree.nodes.items():
   429                                                           if node['is_leaf'] or len(node['cands']) == 1:
   430                                                               continue
   431                                                           cands.extend([(cand, mol_tree, node_id) for cand in node['cand_mols']])
   432                                                           batch_idx.extend([i] * len(node['cands']))
   433                                           
   434                                                   cand_vec = self.jtmpn(cands, mol_tree_batch)
   435                                                   cand_vec = self.G_mean(cand_vec)
   436                                           
   437                                                   batch_idx = cuda(torch.LongTensor(batch_idx))
   438                                                   mol_vec = mol_vec[batch_idx]
   439                                           
   440                                                   mol_vec = mol_vec.view(-1, 1, self.latent_size // 2)
   441                                                   cand_vec = cand_vec.view(-1, self.latent_size // 2, 1)
   442                                                   scores = (mol_vec @ cand_vec)[:, 0, 0]
   443                                           
   444                                                   cnt, tot, acc = 0, 0, 0
   445                                                   all_loss = []
   446                                                   for i, mol_tree in enumerate(mol_batch):
   447                                                       comp_nodes = [node_id for node_id, node in mol_tree.nodes.items()
   448                                                                     if len(node['cands']) > 1 and not node['is_leaf']]
   449                                                       cnt += len(comp_nodes)
   450                                                       # segmented accuracy and cross entropy
   451                                                       for node_id in comp_nodes:
   452                                                           node = mol_tree.nodes[node_id]
   453                                                           label = node['cands'].index(node['label'])
   454                                                           ncand = len(node['cands'])
   455                                                           cur_score = scores[tot:tot+ncand]
   456                                                           tot += ncand
   457                                           
   458                                                           if cur_score[label].item() >= cur_score.max().item():
   459                                                               acc += 1
   460                                           
   461                                                           label = cuda(torch.LongTensor([label]))
   462                                                           all_loss.append(
   463                                                               F.cross_entropy(cur_score.view(1, -1), label, size_average=False))
   464                                           
   465                                                   all_loss = sum(all_loss) / len(mol_batch)
   466                                                   return all_loss, acc / cnt

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: stereo at line 468

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   468                                               @profile
   469                                               def stereo(self, mol_batch, mol_vec):
   470                                                   stereo_cands, batch_idx = [], []
   471                                                   labels = []
   472                                                   for i, mol_tree in enumerate(mol_batch):
   473                                                       cands = mol_tree.stereo_cands
   474                                                       if len(cands) == 1:
   475                                                           continue
   476                                                       if mol_tree.smiles3D not in cands:
   477                                                           cands.append(mol_tree.smiles3D)
   478                                                       stereo_cands.extend(cands)
   479                                                       batch_idx.extend([i] * len(cands))
   480                                                       labels.append((cands.index(mol_tree.smiles3D), len(cands)))
   481                                           
   482                                                   if len(labels) == 0:
   483                                                       # Only one stereoisomer exists; do nothing
   484                                                       return cuda(torch.tensor(0.)), 1.
   485                                           
   486                                                   batch_idx = cuda(torch.LongTensor(batch_idx))
   487                                                   stereo_cands = self.mpn(mol2dgl(stereo_cands))
   488                                                   stereo_cands = self.G_mean(stereo_cands)
   489                                                   stereo_labels = mol_vec[batch_idx]
   490                                                   scores = F.cosine_similarity(stereo_cands, stereo_labels)
   491                                           
   492                                                   st, acc = 0, 0
   493                                                   all_loss = []
   494                                                   for label, le in labels:
   495                                                       cur_scores = scores[st:st+le]
   496                                                       if cur_scores.data[label].item() >= cur_scores.max().item():
   497                                                           acc += 1
   498                                                       label = cuda(torch.LongTensor([label]))
   499                                                       all_loss.append(
   500                                                           F.cross_entropy(cur_scores.view(1, -1), label, size_average=False))
   501                                                       st += le
   502                                           
   503                                                   all_loss = sum(all_loss) / len(labels)
   504                                                   return all_loss, acc / len(labels)

Total time: 28.2765 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: mol2graph at line 38

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                           @profile
    39                                           def mol2graph(mol_batch):
    40       349      14381.0     41.2      0.1      padding = cuda(torch.zeros(ATOM_FDIM + BOND_FDIM))
    41       349        385.0      1.1      0.0      fatoms,fbonds = [],[padding] #Ensure bond is 1-indexed
    42       349        242.0      0.7      0.0      in_bonds,all_bonds = [],[(-1,-1)] #Ensure bond is 1-indexed
    43       349        234.0      0.7      0.0      scope = []
    44       349        211.0      0.6      0.0      total_atoms = 0
    45                                           
    46      5443       4078.0      0.7      0.0      for smiles in mol_batch:
    47      5094     840854.0    165.1      3.0          mol = get_mol(smiles)
    48                                                   #mol = Chem.MolFromSmiles(smiles)
    49      5094      13354.0      2.6      0.0          n_atoms = mol.GetNumAtoms()
    50    122880     739194.0      6.0      2.6          for atom in mol.GetAtoms():
    51    117786    4205632.0     35.7     14.9              fatoms.append( atom_features(atom) )
    52    117786     119090.0      1.0      0.4              in_bonds.append([])
    53                                           
    54    131867     914739.0      6.9      3.2          for bond in mol.GetBonds():
    55    126773     187837.0      1.5      0.7              a1 = bond.GetBeginAtom()
    56    126773     120180.0      0.9      0.4              a2 = bond.GetEndAtom()
    57    126773     136586.0      1.1      0.5              x = a1.GetIdx() + total_atoms
    58    126773     110849.0      0.9      0.4              y = a2.GetIdx() + total_atoms
    59                                           
    60    126773     105398.0      0.8      0.4              b = len(all_bonds) 
    61    126773     107861.0      0.9      0.4              all_bonds.append((x,y))
    62    126773    7034446.0     55.5     24.9              fbonds.append( torch.cat([fatoms[x], bond_features(bond)], 0) )
    63    126773     172921.0      1.4      0.6              in_bonds[y].append(b)
    64                                           
    65    126773     113434.0      0.9      0.4              b = len(all_bonds)
    66    126773     106061.0      0.8      0.4              all_bonds.append((y,x))
    67    126773    7004152.0     55.2     24.8              fbonds.append( torch.cat([fatoms[y], bond_features(bond)], 0) )
    68    126773     171036.0      1.3      0.6              in_bonds[x].append(b)
    69                                                   
    70      5094       5631.0      1.1      0.0          scope.append((total_atoms,n_atoms))
    71      5094       4183.0      0.8      0.0          total_atoms += n_atoms
    72                                           
    73       349        333.0      1.0      0.0      total_bonds = len(all_bonds)
    74       349     365573.0   1047.5      1.3      fatoms = torch.stack(fatoms, 0)
    75       349     778871.0   2231.7      2.8      fbonds = torch.stack(fbonds, 0)
    76       349      51794.0    148.4      0.2      agraph = torch.zeros(total_atoms,MAX_NB).long()
    77       349       5085.0     14.6      0.0      bgraph = torch.zeros(total_bonds,MAX_NB).long()
    78                                           
    79    118135      76526.0      0.6      0.3      for a in range(total_atoms):
    80    371332     318823.0      0.9      1.1          for i,b in enumerate(in_bonds[a]):
    81    253546    1242321.0      4.9      4.4              agraph[a,i] = b
    82                                           
    83    253895     164934.0      0.6      0.6      for b1 in range(1, total_bonds):
    84    253546     163139.0      0.6      0.6          x,y = all_bonds[b1]
    85    859150     691712.0      0.8      2.4          for i,b2 in enumerate(in_bonds[x]):
    86    605604     406518.0      0.7      1.4              if all_bonds[b2][0] != y:
    87    352058    1753773.0      5.0      6.2                  bgraph[b1,i] = b2
    88                                           
    89       349      24087.0     69.0      0.1      return fatoms, fbonds, cuda(agraph), cuda(bgraph), scope

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: mol2dgl at line 91

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    91                                           @profile
    92                                           def mol2dgl(smiles_batch):
    93                                               n_nodes = 0
    94                                               graph_list = []
    95                                               for smiles in smiles_batch:
    96                                                   atom_feature_list = []
    97                                                   bond_feature_list = []
    98                                                   bond_source_feature_list = []
    99                                                   graph = DGLGraph()
   100                                                   mol = get_mol(smiles)
   101                                                   for atom in mol.GetAtoms():
   102                                                       graph.add_node(atom.GetIdx())
   103                                                       atom_feature_list.append(atom_features(atom))
   104                                                   for bond in mol.GetBonds():
   105                                                       begin_idx = bond.GetBeginAtom().GetIdx()
   106                                                       end_idx = bond.GetEndAtom().GetIdx()
   107                                                       features = bond_features(bond)
   108                                                       graph.add_edge(begin_idx, end_idx)
   109                                                       bond_feature_list.append(features)
   110                                                       # set up the reverse direction
   111                                                       graph.add_edge(end_idx, begin_idx)
   112                                                       bond_feature_list.append(features)
   113                                           
   114                                                   atom_x = torch.stack(atom_feature_list)
   115                                                   graph.set_n_repr({'x': atom_x})
   116                                                   if len(bond_feature_list) > 0:
   117                                                       bond_x = torch.stack(bond_feature_list)
   118                                                       graph.set_e_repr({
   119                                                           'x': bond_x,
   120                                                           'src_x': atom_x.new(len(bond_feature_list), ATOM_FDIM).zero_()
   121                                                       })
   122                                                   graph_list.append(graph)
   123                                           
   124                                               return graph_list

Total time: 0.45957 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: forward at line 138

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   138                                               @profile
   139                                               def forward(self, mol_graph):
   140       349        305.0      0.9      0.1          fatoms,fbonds,agraph,bgraph,scope = mol_graph
   141       349       1094.0      3.1      0.2          fatoms = create_var(fatoms)
   142       349        378.0      1.1      0.1          fbonds = create_var(fbonds)
   143       349        357.0      1.0      0.1          agraph = create_var(agraph)
   144       349        332.0      1.0      0.1          bgraph = create_var(bgraph)
   145                                           
   146       349      21144.0     60.6      4.6          binput = self.W_i(fbonds)
   147       349      29830.0     85.5      6.5          message = nn.ReLU()(binput)
   148                                           
   149      1047       1439.0      1.4      0.3          for i in range(self.depth - 1):
   150       698      27103.0     38.8      5.9              nei_message = index_select_ND(message, 0, bgraph)
   151       698      16029.0     23.0      3.5              nei_message = nei_message.sum(dim=1)
   152       698      28371.0     40.6      6.2              nei_message = self.W_h(nei_message)
   153       698      62600.0     89.7     13.6              message = nn.ReLU()(binput + nei_message)
   154                                           
   155       349      11223.0     32.2      2.4          nei_message = index_select_ND(message, 0, agraph)
   156       349       6725.0     19.3      1.5          nei_message = nei_message.sum(dim=1)
   157       349      11894.0     34.1      2.6          ainput = torch.cat([fatoms, nei_message], dim=1)
   158       349      42862.0    122.8      9.3          atom_hiddens = nn.ReLU()(self.W_o(ainput))
   159                                                   
   160       349        344.0      1.0      0.1          mol_vecs = []
   161      5443       3121.0      0.6      0.7          for st,le in scope:
   162      5094     161907.0     31.8     35.2              mol_vec = atom_hiddens.narrow(0, st, le).sum(dim=0) / le
   163      5094       5006.0      1.0      1.1              mol_vecs.append(mol_vec)
   164                                           
   165       349      27216.0     78.0      5.9          mol_vecs = torch.stack(mol_vecs, dim=0)
   166       349        290.0      0.8      0.1          return mol_vecs

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: forward at line 235

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   235                                               @profile
   236                                               def forward(self, mol_graph_list):
   237                                                   n_samples = len(mol_graph_list)
   238                                           
   239                                                   mol_graph = batch(mol_graph_list)
   240                                                   mol_line_graph = line_graph(mol_graph, no_backtracking=True)
   241                                           
   242                                                   n_nodes = len(mol_graph.nodes)
   243                                                   n_edges = len(mol_graph.edges)
   244                                           
   245                                                   mol_graph = self.run(mol_graph, mol_line_graph)
   246                                                   mol_graph_list = unbatch(mol_graph)
   247                                                   g_repr = torch.stack([g.get_n_repr()['h'].mean(0) for g in mol_graph_list], 0)
   248                                           
   249                                                   self.n_samples_total += n_samples
   250                                                   self.n_nodes_total += n_nodes
   251                                                   self.n_edges_total += n_edges
   252                                                   self.n_passes += 1
   253                                           
   254                                                   return g_repr

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: run at line 256

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   256                                               @profile
   257                                               def run(self, mol_graph, mol_line_graph):
   258                                                   n_nodes = len(mol_graph.nodes)
   259                                           
   260                                                   mol_graph.update_edge(
   261                                                       #*zip(*mol_graph.edge_list),
   262                                                       edge_func=lambda src, dst, edge: {'src_x': src['x']},
   263                                                       batchable=True,
   264                                                   )
   265                                           
   266                                                   bond_features = mol_line_graph.get_n_repr()['x']
   267                                                   source_features = mol_line_graph.get_n_repr()['src_x']
   268                                           
   269                                                   features = torch.cat([source_features, bond_features], 1)
   270                                                   msg_input = self.W_i(features)
   271                                                   mol_line_graph.set_n_repr({
   272                                                       'msg_input': msg_input,
   273                                                       'msg': F.relu(msg_input),
   274                                                       'accum_msg': torch.zeros_like(msg_input),
   275                                                   })
   276                                                   mol_graph.set_n_repr({
   277                                                       'm': bond_features.new(n_nodes, self.hidden_size).zero_(),
   278                                                       'h': bond_features.new(n_nodes, self.hidden_size).zero_(),
   279                                                   })
   280                                           
   281                                                   for i in range(self.depth - 1):
   282                                                       mol_line_graph.update_all(
   283                                                           mpn_loopy_bp_msg,
   284                                                           mpn_loopy_bp_reduce,
   285                                                           self.loopy_bp_updater,
   286                                                           True
   287                                                       )
   288                                           
   289                                                   mol_graph.update_all(
   290                                                       mpn_gather_msg,
   291                                                       mpn_gather_reduce,
   292                                                       self.gather_updater,
   293                                                       True
   294                                                   )
   295                                           
   296                                                   return mol_graph

Total time: 1542.67 s
File: molvae/vaetrain.py
Function: train at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           @profile
    63                                           def train():
    64         1          2.0      2.0      0.0      MAX_EPOCH = 1
    65         1          1.0      1.0      0.0      PRINT_ITER = 20
    66                                           
    67         2          5.0      2.5      0.0      for epoch in range(MAX_EPOCH):
    68         1         35.0     35.0      0.0          dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=0, collate_fn=lambda x:x, drop_last=True)
    69                                           
    70         1          1.0      1.0      0.0          word_acc,topo_acc,assm_acc,steo_acc = 0,0,0,0
    71                                           
    72       201  916903235.0 4561707.6     59.4          for it, batch in enumerate(dataloader):
    73      4200       6190.0      1.5      0.0              for mol_tree in batch:
    74     61586      47516.0      0.8      0.0                  for node in mol_tree.nodes:
    75     57586      60542.0      1.1      0.0                      if node.label not in node.cands:
    76        12         16.0      1.3      0.0                          node.cands.append(node.label)
    77        12         12.0      1.0      0.0                          node.cand_mols.append(node.label_mol)
    78                                           
    79       200     162679.0    813.4      0.0              model.zero_grad()
    80       200  562229954.0 2811149.8     36.4              loss, kl_div, wacc, tacc, sacc, dacc = model(batch, beta)
    81       200   62667219.0 313336.1      4.1              loss.backward()
    82       200     545840.0   2729.2      0.0              optimizer.step()
    83                                           
    84       200       2746.0     13.7      0.0              word_acc += wacc
    85       200       1916.0      9.6      0.0              topo_acc += tacc
    86       200        249.0      1.2      0.0              assm_acc += sacc
    87       200        177.0      0.9      0.0              steo_acc += dacc
    88                                           
    89       200        294.0      1.5      0.0              if (it + 1) % PRINT_ITER == 0:
    90        10        286.0     28.6      0.0                  word_acc = word_acc / PRINT_ITER * 100
    91        10        247.0     24.7      0.0                  topo_acc = topo_acc / PRINT_ITER * 100
    92        10         14.0      1.4      0.0                  assm_acc = assm_acc / PRINT_ITER * 100
    93        10          7.0      0.7      0.0                  steo_acc = steo_acc / PRINT_ITER * 100
    94                                           
    95        10        698.0     69.8      0.0                  print("KL: %.1f, Word: %.2f, Topo: %.2f, Assm: %.2f, Steo: %.2f" % (kl_div, word_acc, topo_acc, assm_acc, steo_acc))
    96        10         39.0      3.9      0.0                  word_acc,topo_acc,assm_acc,steo_acc = 0,0,0,0
    97        10         16.0      1.6      0.0                  sys.stdout.flush()
    98                                           
    99       200        190.0      0.9      0.0              if (it + 1) % 1500 == 0: #Fast annealing
   100                                                           scheduler.step()
   101                                                           print("learning rate: %.6f" % scheduler.get_lr()[0])
   102                                                           torch.save(model.state_dict(), opts.save_path + "/model.iter-%d-%d" % (epoch, it + 1))
   103                                           
   104         1         17.0     17.0      0.0          scheduler.step()
   105         1          9.0      9.0      0.0          print("learning rate: %.6f" % scheduler.get_lr()[0])
   106         1      41845.0  41845.0      0.0          torch.save(model.state_dict(), opts.save_path + "/model.iter-" + str(epoch))


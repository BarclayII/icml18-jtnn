Timer unit: 1e-06 s

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtmpn.py
Function: forward at line 51

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    51                                               @profile
    52                                               def forward(self, cand_batch, tree_mess):
    53                                                   fatoms,fbonds = [],[] 
    54                                                   in_bonds,all_bonds = [],[] 
    55                                                   mess_dict,all_mess = {},[create_var(torch.zeros(self.hidden_size))] #Ensure index 0 is vec(0)
    56                                                   total_atoms = 0
    57                                                   scope = []
    58                                           
    59                                                   for e,vec in tree_mess.items():
    60                                                       mess_dict[e] = len(all_mess)
    61                                                       all_mess.append(vec)
    62                                           
    63                                                   for mol,all_nodes,ctr_node in cand_batch:
    64                                                       n_atoms = mol.GetNumAtoms()
    65                                                       ctr_bid = ctr_node.idx
    66                                           
    67                                                       for atom in mol.GetAtoms():
    68                                                           fatoms.append( atom_features(atom) )
    69                                                           in_bonds.append([]) 
    70                                                   
    71                                                       for bond in mol.GetBonds():
    72                                                           a1 = bond.GetBeginAtom()
    73                                                           a2 = bond.GetEndAtom()
    74                                                           x = a1.GetIdx() + total_atoms
    75                                                           y = a2.GetIdx() + total_atoms
    76                                                           #Here x_nid,y_nid could be 0
    77                                                           x_nid,y_nid = a1.GetAtomMapNum(),a2.GetAtomMapNum()
    78                                                           x_bid = all_nodes[x_nid - 1].idx if x_nid > 0 else -1
    79                                                           y_bid = all_nodes[y_nid - 1].idx if y_nid > 0 else -1
    80                                           
    81                                                           bfeature = bond_features(bond)
    82                                           
    83                                                           b = len(all_mess) + len(all_bonds)  #bond idx offseted by len(all_mess)
    84                                                           all_bonds.append((x,y))
    85                                                           fbonds.append( torch.cat([fatoms[x], bfeature], 0) )
    86                                                           in_bonds[y].append(b)
    87                                           
    88                                                           b = len(all_mess) + len(all_bonds)
    89                                                           all_bonds.append((y,x))
    90                                                           fbonds.append( torch.cat([fatoms[y], bfeature], 0) )
    91                                                           in_bonds[x].append(b)
    92                                           
    93                                                           # FIXME: https://github.com/wengong-jin/icml18-jtnn/issues/19
    94                                                           if x_bid >= 0 and y_bid >= 0 and x_bid != y_bid:
    95                                                               if (x_bid,y_bid) in mess_dict:
    96                                                                   mess_idx = mess_dict[(x_bid,y_bid)]
    97                                                                   in_bonds[y].append(mess_idx)
    98                                                               if (y_bid,x_bid) in mess_dict:
    99                                                                   mess_idx = mess_dict[(y_bid,x_bid)]
   100                                                                   in_bonds[x].append(mess_idx)
   101                                                       
   102                                                       scope.append((total_atoms,n_atoms))
   103                                                       total_atoms += n_atoms
   104                                                   
   105                                                   total_bonds = len(all_bonds)
   106                                                   total_mess = len(all_mess)
   107                                                   fatoms = torch.stack(fatoms, 0)
   108                                                   fbonds = torch.stack(fbonds, 0)
   109                                                   agraph = torch.zeros(total_atoms,MAX_NB).long()
   110                                                   bgraph = torch.zeros(total_bonds,MAX_NB).long()
   111                                                   tree_message = torch.stack(all_mess, dim=0)
   112                                           
   113                                                   for a in range(total_atoms):
   114                                                       for i,b in enumerate(in_bonds[a]):
   115                                                           agraph[a,i] = b
   116                                           
   117                                                   for b1 in range(total_bonds):
   118                                                       x,y = all_bonds[b1]
   119                                                       for i,b2 in enumerate(in_bonds[x]): #b2 is offseted by len(all_mess)
   120                                                           if b2 < total_mess or all_bonds[b2-total_mess][0] != y:
   121                                                               bgraph[b1,i] = b2
   122                                           
   123                                                   fatoms = create_var(fatoms)
   124                                                   fbonds = create_var(fbonds)
   125                                                   agraph = create_var(agraph)
   126                                                   bgraph = create_var(bgraph)
   127                                           
   128                                                   binput = self.W_i(fbonds)
   129                                                   graph_message = nn.ReLU()(binput)
   130                                           
   131                                                   for i in range(self.depth - 1):
   132                                                       message = torch.cat([tree_message,graph_message], dim=0)
   133                                                       nei_message = index_select_ND(message, 0, bgraph)
   134                                                       nei_message = nei_message.sum(dim=1)
   135                                                       nei_message = self.W_h(nei_message)
   136                                                       graph_message = nn.ReLU()(binput + nei_message)
   137                                           
   138                                                   message = torch.cat([tree_message,graph_message], dim=0)
   139                                                   nei_message = index_select_ND(message, 0, agraph)
   140                                                   nei_message = nei_message.sum(dim=1)
   141                                                   ainput = torch.cat([fatoms, nei_message], dim=1)
   142                                                   atom_hiddens = nn.ReLU()(self.W_o(ainput))
   143                                                   
   144                                                   mol_vecs = []
   145                                                   for st,le in scope:
   146                                                       mol_vec = atom_hiddens.narrow(0, st, le).sum(dim=0) / le
   147                                                       mol_vecs.append(mol_vec)
   148                                           
   149                                                   mol_vecs = torch.stack(mol_vecs, dim=0)
   150                                                   return mol_vecs

Total time: 24.6674 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtmpn.py
Function: mol2dgl at line 152

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   152                                           @profile
   153                                           def mol2dgl(cand_batch, mol_tree_batch):
   154        10         12.0      1.2      0.0      cand_graphs = []
   155        10          9.0      0.9      0.0      tree_mess_source_edges = [] # map these edges from trees to...
   156        10          9.0      0.9      0.0      tree_mess_target_edges = [] # these edges on candidate graphs
   157        10          8.0      0.8      0.0      tree_mess_target_nodes = []
   158        10         10.0      1.0      0.0      n_nodes = 0
   159                                           
   160     13854      18519.0      1.3      0.1      for mol, mol_tree, ctr_node_id in cand_batch:
   161     13844     104484.0      7.5      0.4          atom_feature_list = []
   162     13844      71537.0      5.2      0.3          bond_feature_list = []
   163     13844      88105.0      6.4      0.4          ctr_node = mol_tree.nodes[ctr_node_id]
   164     13844      15069.0      1.1      0.1          ctr_bid = ctr_node['idx']
   165     13844     892814.0     64.5      3.6          g = DGLGraph()
   166                                           
   167    148320    2392313.0     16.1      9.7          for atom in mol.GetAtoms():
   168    134476    2939168.0     21.9     11.9              atom_feature_list.append(atom_features(atom))
   169    134476    2123633.0     15.8      8.6              g.add_node(atom.GetIdx())
   170                                           
   171    155307    2354331.0     15.2      9.5          for bond in mol.GetBonds():
   172    141463     280397.0      2.0      1.1              a1 = bond.GetBeginAtom()
   173    141463     223835.0      1.6      0.9              a2 = bond.GetEndAtom()
   174    141463     196258.0      1.4      0.8              begin_idx = a1.GetIdx()
   175    141463     177593.0      1.3      0.7              end_idx = a2.GetIdx()
   176    141463    1444664.0     10.2      5.9              features = bond_features(bond)
   177                                           
   178    141463    2656720.0     18.8     10.8              g.add_edge(begin_idx, end_idx)
   179    141463     150436.0      1.1      0.6              bond_feature_list.append(features)
   180    141463    1666927.0     11.8      6.8              g.add_edge(end_idx, begin_idx)
   181    141463     140877.0      1.0      0.6              bond_feature_list.append(features)
   182                                           
   183    141463     354407.0      2.5      1.4              x_nid, y_nid = a1.GetAtomMapNum(), a2.GetAtomMapNum()
   184                                                       # Tree node ID in the batch
   185    141463     582467.0      4.1      2.4              x_bid = mol_tree.nodes[x_nid - 1]['idx'] if x_nid > 0 else -1
   186    141463     478754.0      3.4      1.9              y_bid = mol_tree.nodes[y_nid - 1]['idx'] if y_nid > 0 else -1
   187    141463     142205.0      1.0      0.6              if x_bid >= 0 and y_bid >= 0 and x_bid != y_bid:
   188     30468     619219.0     20.3      2.5                  if (x_bid, y_bid) in mol_tree_batch.edge_list:
   189     30402      32093.0      1.1      0.1                      tree_mess_target_edges.append(
   190     30402      41442.0      1.4      0.2                              (begin_idx + n_nodes, end_idx + n_nodes))
   191     30402      35943.0      1.2      0.1                      tree_mess_source_edges.append((x_bid, y_bid))
   192     30402      34742.0      1.1      0.1                      tree_mess_target_nodes.append(end_idx + n_nodes)
   193     30468     461121.0     15.1      1.9                  if (y_bid, x_bid) in mol_tree_batch.edge_list:
   194     30402      28774.0      0.9      0.1                      tree_mess_target_edges.append(
   195     30402      33695.0      1.1      0.1                              (end_idx + n_nodes, begin_idx + n_nodes))
   196     30402      35918.0      1.2      0.1                      tree_mess_source_edges.append((y_bid, x_bid))
   197     30402      76793.0      2.5      0.3                      tree_mess_target_nodes.append(begin_idx + n_nodes)
   198                                           
   199     13844     157960.0     11.4      0.6          n_nodes += len(g.nodes)
   200                                           
   201     13844     384568.0     27.8      1.6          atom_x = torch.stack(atom_feature_list)
   202     13844     631094.0     45.6      2.6          g.set_n_repr({'x': atom_x})
   203     13844      20399.0      1.5      0.1          if len(bond_feature_list) > 0:
   204     13844     392762.0     28.4      1.6              bond_x = torch.stack(bond_feature_list)
   205     13844      19332.0      1.4      0.1              g.set_e_repr({
   206     13844      12095.0      0.9      0.0                  'x': bond_x,
   207     13844    2128128.0    153.7      8.6                  'src_x': atom_x.new(len(bond_feature_list), ATOM_FDIM).zero_()
   208                                                       })
   209     13844      25754.0      1.9      0.1          cand_graphs.append(g)
   210                                           
   211        10         11.0      1.1      0.0      return cand_graphs, tree_mess_source_edges, tree_mess_target_edges, \
   212        10         10.0      1.0      0.0             tree_mess_target_nodes

Total time: 109.059 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtmpn.py
Function: forward at line 299

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   299                                               @profile
   300                                               def forward(self, cand_batch, mol_tree_batch):
   301                                                   cand_graphs, tree_mess_src_edges, tree_mess_tgt_edges, tree_mess_tgt_nodes = \
   302        10   27686742.0 2768674.2     25.4                  mol2dgl(cand_batch, mol_tree_batch)
   303        10   15137624.0 1513762.4     13.9          cand_graphs = batch(cand_graphs)
   304        10   56055102.0 5605510.2     51.4          cand_line_graph = line_graph(cand_graphs, no_backtracking=True)
   305                                           
   306        10         79.0      7.9      0.0          cand_graphs = self.run(
   307        10         16.0      1.6      0.0                  cand_graphs, cand_line_graph, tree_mess_src_edges, tree_mess_tgt_edges,
   308        10    5982221.0 598222.1      5.5                  tree_mess_tgt_nodes, mol_tree_batch)
   309                                           
   310        10    3069566.0 306956.6      2.8          cand_graphs = unbatch(cand_graphs)
   311        10    1127490.0 112749.0      1.0          g_repr = torch.stack([g.get_n_repr()['h'].mean(0) for g in cand_graphs], 0)
   312                                           
   313        10         37.0      3.7      0.0          return g_repr

Total time: 5.97607 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtmpn.py
Function: run at line 315

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   315                                               @profile
   316                                               def run(self, cand_graphs, cand_line_graph, tree_mess_src_edges, tree_mess_tgt_edges,
   317                                                       tree_mess_tgt_nodes, mol_tree_batch):
   318        10        274.0     27.4      0.0          n_nodes = len(cand_graphs.nodes)
   319                                           
   320        10         35.0      3.5      0.0          cand_graphs.update_edge(
   321        10     474059.0  47405.9      7.9              *zip(*cand_graphs.edge_list),
   322        10      23270.0   2327.0      0.4              lambda src, dst, edge: {'src_x': src['x']},
   323        10     643424.0  64342.4     10.8              batchable=True,
   324                                                   )
   325                                           
   326        10        689.0     68.9      0.0          bond_features = cand_line_graph.get_n_repr()['x']
   327        10        253.0     25.3      0.0          source_features = cand_line_graph.get_n_repr()['src_x']
   328        10      12050.0   1205.0      0.2          features = torch.cat([source_features, bond_features], 1)
   329        10      70810.0   7081.0      1.2          msg_input = self.W_i(features)
   330        10         68.0      6.8      0.0          cand_line_graph.set_n_repr({
   331        10         37.0      3.7      0.0              'msg_input': msg_input,
   332        10     114778.0  11477.8      1.9              'msg': torch.relu(msg_input),
   333        10      27987.0   2798.7      0.5              'accum_msg': torch.zeros_like(msg_input),
   334                                                   })
   335        10      14179.0   1417.9      0.2          zero_node_state = bond_features.new(n_nodes, self.hidden_size).zero_()
   336        10         51.0      5.1      0.0          cand_graphs.set_n_repr({
   337        10      20809.0   2080.9      0.3              'm': zero_node_state.clone(),
   338        10      17718.0   1771.8      0.3              'h': zero_node_state.clone(),
   339                                                   })
   340                                           
   341                                                   # TODO: context
   342        10         31.0      3.1      0.0          if PAPER:
   343                                                       cand_graphs.set_e_repr({
   344                                                           'alpha': torch.zeros(len(cand_graphs.edge_list), self.hidden_size)
   345                                                       })
   346                                           
   347                                                       alpha = mol_tree_batch.get_e_repr(*zip(*tree_mess_src_edges))['m']
   348                                                       cand_graphs.set_e_repr({'alpha': alpha}, *zip(*tree_mess_tgt_edges))
   349                                                   else:
   350        10      78913.0   7891.3      1.3              alpha = mol_tree_batch.get_e_repr(*zip(*tree_mess_src_edges))['m']
   351        10       2502.0    250.2      0.0              node_idx = (torch.LongTensor(tree_mess_tgt_nodes)
   352        10        329.0     32.9      0.0                          .to(device=zero_node_state.device)[:, None]
   353        10        135.0     13.5      0.0                          .expand_as(alpha))
   354        10     275928.0  27592.8      4.6              node_alpha = zero_node_state.clone().scatter_add(0, node_idx, alpha)
   355        10       1545.0    154.5      0.0              cand_graphs.set_n_repr({'alpha': node_alpha})
   356        10         33.0      3.3      0.0              cand_graphs.update_edge(
   357        10      47186.0   4718.6      0.8                  *zip(*cand_graphs.edge_list),
   358        10      24615.0   2461.5      0.4                  lambda src, dst, edge: {'alpha': src['alpha']},
   359        10    1024586.0 102458.6     17.1                  batchable=True,
   360                                                       )
   361                                           
   362        30        188.0      6.3      0.0          for i in range(self.depth - 1):
   363        20         38.0      1.9      0.0              cand_line_graph.update_all(
   364        20         33.0      1.6      0.0                  mpn_loopy_bp_msg,
   365        20         28.0      1.4      0.0                  mpn_loopy_bp_reduce,
   366        20        245.0     12.2      0.0                  self.loopy_bp_updater,
   367        20    1503910.0  75195.5     25.2                  True
   368                                                       )
   369                                           
   370        10         23.0      2.3      0.0          cand_graphs.update_all(
   371        10         18.0      1.8      0.0              mpn_gather_msg,
   372        10         17.0      1.7      0.0              mpn_gather_reduce,
   373        10        188.0     18.8      0.0              self.gather_updater,
   374        10    1595063.0 159506.3     26.7              True
   375                                                   )
   376                                           
   377        10         29.0      2.9      0.0          return cand_graphs

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_dec.py
Function: forward at line 55

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    55                                               @profile
    56                                               def forward(self, mol_batch, mol_vec):
    57                                                   super_root = MolTreeNode("")
    58                                                   super_root.idx = -1
    59                                           
    60                                                   #Initialize
    61                                                   pred_hiddens,pred_mol_vecs,pred_targets = [],[],[]
    62                                                   stop_hiddens,stop_targets = [],[]
    63                                                   traces = []
    64                                                   for mol_tree in mol_batch:
    65                                                       s = []
    66                                                       dfs(s, mol_tree.nodes[0], super_root)
    67                                                       traces.append(s)
    68                                                       for node in mol_tree.nodes:
    69                                                           node.neighbors = []
    70                                           
    71                                                   #Predict Root
    72                                                   pred_hiddens.append(create_var(torch.zeros(len(mol_batch),self.hidden_size)))
    73                                                   pred_targets.extend([mol_tree.nodes[0].wid for mol_tree in mol_batch])
    74                                                   pred_mol_vecs.append(mol_vec) 
    75                                           
    76                                                   max_iter = max([len(tr) for tr in traces])
    77                                                   padding = create_var(torch.zeros(self.hidden_size), False)
    78                                                   h = {}
    79                                           
    80                                                   for t in range(max_iter):
    81                                                       prop_list = []
    82                                                       batch_list = []
    83                                                       for i,plist in enumerate(traces):
    84                                                           if t < len(plist):
    85                                                               prop_list.append(plist[t])
    86                                                               batch_list.append(i)
    87                                           
    88                                                       cur_x = []
    89                                                       cur_h_nei,cur_o_nei = [],[]
    90                                           
    91                                                       for node_x,real_y,_ in prop_list:
    92                                                           #Neighbors for message passing (target not included)
    93                                                           cur_nei = [h[(node_y.idx,node_x.idx)] for node_y in node_x.neighbors if node_y.idx != real_y.idx]
    94                                                           pad_len = MAX_NB - len(cur_nei)
    95                                                           cur_h_nei.extend(cur_nei)
    96                                                           cur_h_nei.extend([padding] * pad_len)
    97                                           
    98                                                           #Neighbors for stop prediction (all neighbors)
    99                                                           cur_nei = [h[(node_y.idx,node_x.idx)] for node_y in node_x.neighbors]
   100                                                           pad_len = MAX_NB - len(cur_nei)
   101                                                           cur_o_nei.extend(cur_nei)
   102                                                           cur_o_nei.extend([padding] * pad_len)
   103                                           
   104                                                           #Current clique embedding
   105                                                           cur_x.append(node_x.wid)
   106                                           
   107                                                       #Clique embedding
   108                                                       cur_x = create_var(torch.LongTensor(cur_x))
   109                                                       cur_x = self.embedding(cur_x)
   110                                           
   111                                                       #Message passing
   112                                                       cur_h_nei = torch.stack(cur_h_nei, dim=0).view(-1,MAX_NB,self.hidden_size)
   113                                                       new_h = GRU(cur_x, cur_h_nei, self.W_z, self.W_r, self.U_r, self.W_h)
   114                                           
   115                                                       #Node Aggregate
   116                                                       cur_o_nei = torch.stack(cur_o_nei, dim=0).view(-1,MAX_NB,self.hidden_size)
   117                                                       cur_o = cur_o_nei.sum(dim=1)
   118                                           
   119                                                       #Gather targets
   120                                                       pred_target,pred_list = [],[]
   121                                                       stop_target = []
   122                                                       for i,m in enumerate(prop_list):
   123                                                           node_x,node_y,direction = m
   124                                                           x,y = node_x.idx,node_y.idx
   125                                                           h[(x,y)] = new_h[i]
   126                                                           node_y.neighbors.append(node_x)
   127                                                           if direction == 1:
   128                                                               pred_target.append(node_y.wid)
   129                                                               pred_list.append(i) 
   130                                                           stop_target.append(direction)
   131                                           
   132                                                       #Hidden states for stop prediction
   133                                                       cur_batch = create_var(torch.LongTensor(batch_list))
   134                                                       cur_mol_vec = mol_vec.index_select(0, cur_batch)
   135                                                       stop_hidden = torch.cat([cur_x,cur_o,cur_mol_vec], dim=1)
   136                                                       stop_hiddens.append( stop_hidden )
   137                                                       stop_targets.extend( stop_target )
   138                                                       
   139                                                       #Hidden states for clique prediction
   140                                                       if len(pred_list) > 0:
   141                                                           batch_list = [batch_list[i] for i in pred_list]
   142                                                           cur_batch = create_var(torch.LongTensor(batch_list))
   143                                                           pred_mol_vecs.append( mol_vec.index_select(0, cur_batch) )
   144                                           
   145                                                           cur_pred = create_var(torch.LongTensor(pred_list))
   146                                                           pred_hiddens.append( new_h.index_select(0, cur_pred) )
   147                                                           pred_targets.extend( pred_target )
   148                                           
   149                                                   #Last stop at root
   150                                                   cur_x,cur_o_nei = [],[]
   151                                                   for mol_tree in mol_batch:
   152                                                       node_x = mol_tree.nodes[0]
   153                                                       cur_x.append(node_x.wid)
   154                                                       cur_nei = [h[(node_y.idx,node_x.idx)] for node_y in node_x.neighbors]
   155                                                       pad_len = MAX_NB - len(cur_nei)
   156                                                       cur_o_nei.extend(cur_nei)
   157                                                       cur_o_nei.extend([padding] * pad_len)
   158                                           
   159                                                   cur_x = create_var(torch.LongTensor(cur_x))
   160                                                   cur_x = self.embedding(cur_x)
   161                                                   cur_o_nei = torch.stack(cur_o_nei, dim=0).view(-1,MAX_NB,self.hidden_size)
   162                                                   cur_o = cur_o_nei.sum(dim=1)
   163                                           
   164                                                   stop_hidden = torch.cat([cur_x,cur_o,mol_vec], dim=1)
   165                                                   stop_hiddens.append( stop_hidden )
   166                                                   stop_targets.extend( [0] * len(mol_batch) )
   167                                           
   168                                                   #Predict next clique
   169                                                   pred_hiddens = torch.cat(pred_hiddens, dim=0)
   170                                                   pred_mol_vecs = torch.cat(pred_mol_vecs, dim=0)
   171                                                   pred_vecs = torch.cat([pred_hiddens, pred_mol_vecs], dim=1)
   172                                                   pred_vecs = nn.ReLU()(self.W(pred_vecs))
   173                                                   pred_scores = self.W_o(pred_vecs)
   174                                                   pred_targets = create_var(torch.LongTensor(pred_targets))
   175                                           
   176                                                   pred_loss = self.pred_loss(pred_scores, pred_targets) / len(mol_batch)
   177                                                   _,preds = torch.max(pred_scores, dim=1)
   178                                                   pred_acc = torch.eq(preds, pred_targets).float()
   179                                                   pred_acc = torch.sum(pred_acc) / pred_targets.nelement()
   180                                           
   181                                                   #Predict stop
   182                                                   stop_hiddens = torch.cat(stop_hiddens, dim=0)
   183                                                   stop_vecs = nn.ReLU()(self.U(stop_hiddens))
   184                                                   stop_scores = self.U_s(stop_vecs).squeeze()
   185                                                   stop_targets = create_var(torch.Tensor(stop_targets))
   186                                                   
   187                                                   stop_loss = self.stop_loss(stop_scores, stop_targets) / len(mol_batch)
   188                                                   stops = torch.ge(stop_scores, 0).float()
   189                                                   stop_acc = torch.eq(stops, stop_targets).float()
   190                                                   stop_acc = torch.sum(stop_acc) / stop_targets.nelement()
   191                                           
   192                                                   return pred_loss, stop_loss, pred_acc.data[0], stop_acc.data[0]

Total time: 4.95852 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_dec.py
Function: forward at line 398

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   398                                               @profile
   399                                               def forward(self, mol_trees, tree_vec):
   400                                                   '''
   401                                                   The training procedure which computes the prediction loss given the
   402                                                   ground truth tree
   403                                                   '''
   404        10     278903.0  27890.3      5.6          mol_tree_batch = batch(mol_trees)
   405        10    1591562.0 159156.2     32.1          mol_tree_batch_lg = line_graph(mol_tree_batch, no_backtracking=True)
   406        10         25.0      2.5      0.0          n_trees = len(mol_trees)
   407                                           
   408        10    3088030.0 308803.0     62.3          return self.run(mol_tree_batch, mol_tree_batch_lg, n_trees, tree_vec)

Total time: 3.0519 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_dec.py
Function: run at line 410

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   410                                               @profile
   411                                               def run(self, mol_tree_batch, mol_tree_batch_lg, n_trees, tree_vec):
   412        10         97.0      9.7      0.0          root_ids = mol_tree_batch.node_offset[:-1]
   413        10        118.0     11.8      0.0          n_nodes = len(mol_tree_batch.nodes)
   414        10         34.0      3.4      0.0          edge_list = mol_tree_batch.edge_list
   415        10         18.0      1.8      0.0          n_edges = len(edge_list)
   416                                           
   417        10         17.0      1.7      0.0          mol_tree_batch.set_n_repr({
   418        10       2407.0    240.7      0.1              'x': self.embedding(mol_tree_batch.get_n_repr()['wid']),
   419        10        715.0     71.5      0.0              'h': torch.zeros(n_nodes, self.hidden_size),
   420        10       1395.0    139.5      0.0              'new': torch.ones(n_nodes).byte(),  # whether it's newly generated node
   421                                                   })
   422                                           
   423        10         26.0      2.6      0.0          mol_tree_batch.set_e_repr({
   424        10        932.0     93.2      0.0              's': torch.zeros(n_edges, self.hidden_size),
   425        10        956.0     95.6      0.0              'm': torch.zeros(n_edges, self.hidden_size),
   426        10        967.0     96.7      0.0              'r': torch.zeros(n_edges, self.hidden_size),
   427        10        953.0     95.3      0.0              'z': torch.zeros(n_edges, self.hidden_size),
   428        10        933.0     93.3      0.0              'src_x': torch.zeros(n_edges, self.hidden_size),
   429        10        914.0     91.4      0.0              'dst_x': torch.zeros(n_edges, self.hidden_size),
   430        10        914.0     91.4      0.0              'rm': torch.zeros(n_edges, self.hidden_size),
   431        10       8214.0    821.4      0.3              'accum_rm': torch.zeros(n_edges, self.hidden_size),
   432                                                   })
   433                                           
   434        10         44.0      4.4      0.0          mol_tree_batch.update_edge(
   435        10      60203.0   6020.3      2.0              *zip(*edge_list),
   436        10        388.0     38.8      0.0              lambda src, dst, edge: {'src_x': src['x'], 'dst_x': dst['x']},
   437        10      41069.0   4106.9      1.3              batchable=True,
   438                                                   )
   439                                           
   440                                                   # input tensors for stop prediction (p) and label prediction (q)
   441        10         41.0      4.1      0.0          p_inputs = []
   442        10         23.0      2.3      0.0          p_targets = []
   443        10         20.0      2.0      0.0          q_inputs = []
   444        10         19.0      1.9      0.0          q_targets = []
   445                                           
   446                                                   # Predict root
   447        10         32.0      3.2      0.0          mol_tree_batch.pull(
   448        10         28.0      2.8      0.0              root_ids,
   449        10         23.0      2.3      0.0              dec_tree_node_msg,
   450        10         20.0      2.0      0.0              dec_tree_node_reduce,
   451        10         22.0      2.2      0.0              dec_tree_node_update,
   452        10      17505.0   1750.5      0.6              batchable=True,
   453                                                   )
   454                                                   # Extract hidden states and store them for stop/label prediction
   455        10        783.0     78.3      0.0          h = mol_tree_batch.get_n_repr(root_ids)['h']
   456        10        799.0     79.9      0.0          x = mol_tree_batch.get_n_repr(root_ids)['x']
   457        10        592.0     59.2      0.0          p_inputs.append(torch.cat([x, h, tree_vec], 1))
   458        10         85.0      8.5      0.0          t_set = list(range(len(root_ids)))
   459        10        314.0     31.4      0.0          q_inputs.append(torch.cat([h, tree_vec], 1))
   460        10        694.0     69.4      0.0          q_targets.append(mol_tree_batch.get_n_repr(root_ids)['wid'])
   461                                           
   462                                                   # Traverse the tree and predict on children
   463       444     120829.0    272.1      4.0          for u, v, i, p in dfs_order(mol_tree_batch, root_ids):
   464       434       3638.0      8.4      0.1              assert set(t_set).issuperset(i)
   465       434       4420.0     10.2      0.1              ip = dict(zip(i, p))
   466                                                       # TODO: context
   467       434       9607.0     22.1      0.3              p_targets.append(torch.tensor([ip.get(_i, 0) for _i in t_set]))
   468       434       1573.0      3.6      0.1              t_set = list(i)
   469       434      35340.0     81.4      1.2              eid = mol_tree_batch.get_edge_id(u, v)
   470       434       1217.0      2.8      0.0              mol_tree_batch_lg.pull(
   471       434        886.0      2.0      0.0                  eid,
   472       434        934.0      2.2      0.0                  dec_tree_edge_msg,
   473       434        954.0      2.2      0.0                  dec_tree_edge_reduce,
   474       434       5251.0     12.1      0.2                  self.dec_tree_edge_update,
   475       434    1384222.0   3189.5     45.4                  batchable=True,
   476                                                       )
   477       434      46465.0    107.1      1.5              is_new = mol_tree_batch.get_n_repr(v)['new']
   478       434       1507.0      3.5      0.0              mol_tree_batch.pull(
   479       434       1003.0      2.3      0.0                  v,
   480       434       1176.0      2.7      0.0                  dec_tree_node_msg,
   481       434       1092.0      2.5      0.0                  dec_tree_node_reduce,
   482       434       1060.0      2.4      0.0                  dec_tree_node_update,
   483       434     989045.0   2278.9     32.4                  batchable=True,
   484                                                       )
   485                                                       # Extract
   486       434      34167.0     78.7      1.1              h = mol_tree_batch.get_n_repr(v)['h']
   487       434      32428.0     74.7      1.1              x = mol_tree_batch.get_n_repr(v)['x']
   488       434      52741.0    121.5      1.7              p_inputs.append(torch.cat([x, h, tree_vec[t_set]], 1))
   489                                                       # Only newly generated nodes are needed for label prediction
   490                                                       # NOTE: The following works since the uncomputed messages are zeros.
   491       434      67536.0    155.6      2.2              q_inputs.append(torch.cat([h[is_new], tree_vec[t_set][is_new]], 1))
   492       434      42361.0     97.6      1.4              q_targets.append(mol_tree_batch.get_n_repr(v)['wid'][is_new])
   493        10        111.0     11.1      0.0          p_targets.append(torch.tensor([0 for _ in t_set]))
   494                                           
   495                                                   # Batch compute the stop/label prediction losses
   496        10       5429.0    542.9      0.2          p_inputs = torch.cat(p_inputs, 0)
   497        10        932.0     93.2      0.0          p_targets = torch.cat(p_targets, 0)
   498        10       1817.0    181.7      0.1          q_inputs = torch.cat(q_inputs, 0)
   499        10        864.0     86.4      0.0          q_targets = torch.cat(q_targets, 0)
   500                                           
   501        10      24204.0   2420.4      0.8          q = self.W_o(torch.relu(self.W(q_inputs)))
   502        10      21383.0   2138.3      0.7          p = self.U_s(torch.relu(self.U(p_inputs)))[:, 0]
   503                                           
   504        10         47.0      4.7      0.0          p_loss = F.binary_cross_entropy_with_logits(
   505        10       2342.0    234.2      0.1              p, p_targets.float(), size_average=False
   506        10        123.0     12.3      0.0          ) / n_trees
   507        10       6997.0    699.7      0.2          q_loss = F.cross_entropy(q, q_targets, size_average=False) / n_trees
   508        10        750.0     75.0      0.0          p_acc = ((p > 0).long() == p_targets).sum().float() / p_targets.shape[0]
   509        10       5110.0    511.0      0.2          q_acc = (q.max(1)[1] == q_targets).float().sum() / q_targets.shape[0]
   510                                           
   511        10         28.0      2.8      0.0          return q_loss, p_loss, q_acc, p_acc

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_enc.py
Function: forward at line 33

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                               @profile
    34                                               def forward(self, root_batch):
    35                                                   orders = []
    36                                                   for root in root_batch:
    37                                                       order = get_prop_order(root)
    38                                                       orders.append(order)
    39                                                   
    40                                                   h = {}
    41                                                   max_depth = max([len(x) for x in orders])
    42                                                   padding = create_var(torch.zeros(self.hidden_size), False)
    43                                           
    44                                                   for t in range(max_depth):
    45                                                       prop_list = []
    46                                                       for order in orders:
    47                                                           if t < len(order):
    48                                                               prop_list.extend(order[t])
    49                                           
    50                                                       cur_x = []
    51                                                       cur_h_nei = []
    52                                                       for node_x,node_y in prop_list:
    53                                                           x,y = node_x.idx,node_y.idx
    54                                                           cur_x.append(node_x.wid)
    55                                           
    56                                                           h_nei = []
    57                                                           for node_z in node_x.neighbors:
    58                                                               z = node_z.idx
    59                                                               if z == y: continue
    60                                                               h_nei.append(h[(z,x)])
    61                                           
    62                                                           pad_len = MAX_NB - len(h_nei)
    63                                                           h_nei.extend([padding] * pad_len)
    64                                                           cur_h_nei.extend(h_nei)
    65                                           
    66                                                       cur_x = create_var(torch.LongTensor(cur_x))
    67                                                       cur_x = self.embedding(cur_x)
    68                                                       cur_h_nei = torch.cat(cur_h_nei, dim=0).view(-1,MAX_NB,self.hidden_size)
    69                                           
    70                                                       new_h = GRU(cur_x, cur_h_nei, self.W_z, self.W_r, self.U_r, self.W_h)
    71                                                       for i,m in enumerate(prop_list):
    72                                                           x,y = m[0].idx,m[1].idx
    73                                                           h[(x,y)] = new_h[i]
    74                                           
    75                                                   root_vecs = node_aggregate(root_batch, h, self.embedding, self.W)
    76                                           
    77                                                   return h, root_vecs

Total time: 3.84524 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_enc.py
Function: forward at line 201

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   201                                               @profile
   202                                               def forward(self, mol_trees):
   203        10     275780.0  27578.0      7.2          mol_tree_batch = batch(mol_trees)
   204                                                   
   205                                                   # Build line graph to prepare for belief propagation
   206        10    2201905.0 220190.5     57.3          mol_tree_batch_lg = line_graph(mol_tree_batch, no_backtracking=True)
   207                                           
   208        10    1367556.0 136755.6     35.6          return self.run(mol_tree_batch, mol_tree_batch_lg)

Total time: 1.36217 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_enc.py
Function: run at line 210

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   210                                               @profile
   211                                               def run(self, mol_tree_batch, mol_tree_batch_lg):
   212                                                   # Since tree roots are designated to 0.  In the batched graph we can
   213                                                   # simply find the corresponding node ID by looking at node_offset
   214        10         67.0      6.7      0.0          root_ids = mol_tree_batch.node_offset[:-1]
   215        10         98.0      9.8      0.0          n_nodes = len(mol_tree_batch.nodes)
   216        10         23.0      2.3      0.0          edge_list = mol_tree_batch.edge_list
   217        10         12.0      1.2      0.0          n_edges = len(edge_list)
   218                                           
   219                                                   # Assign structure embeddings to tree nodes
   220        10         15.0      1.5      0.0          mol_tree_batch.set_n_repr({
   221        10       2117.0    211.7      0.2              'x': self.embedding(mol_tree_batch.get_n_repr()['wid']),
   222        10       1524.0    152.4      0.1              'h': torch.zeros(n_nodes, self.hidden_size),
   223                                                   })
   224                                           
   225                                                   # Initialize the intermediate variables according to Eq (4)-(8).
   226                                                   # Also initialize the src_x and dst_x fields.
   227                                                   # TODO: context?
   228        10         19.0      1.9      0.0          mol_tree_batch.set_e_repr({
   229        10        937.0     93.7      0.1              's': torch.zeros(n_edges, self.hidden_size),
   230        10        882.0     88.2      0.1              'm': torch.zeros(n_edges, self.hidden_size),
   231        10        945.0     94.5      0.1              'r': torch.zeros(n_edges, self.hidden_size),
   232        10        937.0     93.7      0.1              'z': torch.zeros(n_edges, self.hidden_size),
   233        10        962.0     96.2      0.1              'src_x': torch.zeros(n_edges, self.hidden_size),
   234        10        981.0     98.1      0.1              'dst_x': torch.zeros(n_edges, self.hidden_size),
   235        10       1364.0    136.4      0.1              'rm': torch.zeros(n_edges, self.hidden_size),
   236        10       7486.0    748.6      0.5              'accum_rm': torch.zeros(n_edges, self.hidden_size),
   237                                                   })
   238                                           
   239                                                   # Send the source/destination node features to edges
   240        10         27.0      2.7      0.0          mol_tree_batch.update_edge(
   241        10       2158.0    215.8      0.2              *zip(*edge_list),
   242        10        407.0     40.7      0.0              lambda src, dst, edge: {'src_x': src['x'], 'dst_x': dst['x']},
   243        10      43332.0   4333.2      3.2              batchable=True,
   244                                                   )
   245                                           
   246                                                   # Message passing
   247                                                   # I exploited the fact that the reduce function is a sum of incoming
   248                                                   # messages, and the uncomputed messages are zero vectors.  Essentially,
   249                                                   # we can always compute s_ij as the sum of incoming m_ij, no matter
   250                                                   # if m_ij is actually computed or not.
   251       312      61742.0    197.9      4.5          for u, v in level_order(mol_tree_batch, root_ids):
   252       302      38889.0    128.8      2.9              eid = mol_tree_batch.get_edge_id(u, v)
   253       302        720.0      2.4      0.1              mol_tree_batch_lg.pull(
   254       302        384.0      1.3      0.0                  eid,
   255       302        429.0      1.4      0.0                  enc_tree_msg,
   256       302        451.0      1.5      0.0                  enc_tree_reduce,
   257       302       3980.0     13.2      0.3                  self.enc_tree_update,
   258       302    1104257.0   3656.5     81.1                  batchable=True,
   259                                                       )
   260                                           
   261                                                   # Readout
   262        10         26.0      2.6      0.0          mol_tree_batch.update_all(
   263        10         20.0      2.0      0.0              enc_tree_gather_msg,
   264        10         16.0      1.6      0.0              enc_tree_gather_reduce,
   265        10        135.0     13.5      0.0              self.enc_tree_gather_update,
   266        10      85350.0   8535.0      6.3              batchable=True,
   267                                                   )
   268                                           
   269        10       1458.0    145.8      0.1          root_vecs = mol_tree_batch.get_n_repr(root_ids)['h']
   270                                           
   271        10         21.0      2.1      0.0          return mol_tree_batch, root_vecs

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: encode at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                               @profile
    63                                               def encode(self, mol_batch):
    64                                                   set_batch_nodeID(mol_batch, self.vocab)
    65                                                   root_batch = [mol_tree.nodes[0] for mol_tree in mol_batch]
    66                                                   tree_mess,tree_vec = self.jtnn(root_batch)
    67                                           
    68                                                   smiles_batch = [mol_tree.smiles for mol_tree in mol_batch]
    69                                                   mol_vec = self.mpn(mol2graph(smiles_batch))
    70                                                   return tree_mess, tree_vec, mol_vec

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: forward at line 82

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    82                                               @profile
    83                                               def forward(self, mol_batch, beta=0, e1=None, e2=None):
    84                                                   batch_size = len(mol_batch)
    85                                           
    86                                                   tree_mess, tree_vec, mol_vec = self.encode(mol_batch)
    87                                           
    88                                                   tree_mean = self.T_mean(tree_vec)
    89                                                   tree_log_var = -torch.abs(self.T_var(tree_vec)) #Following Mueller et al.
    90                                                   mol_mean = self.G_mean(mol_vec)
    91                                                   mol_log_var = -torch.abs(self.G_var(mol_vec)) #Following Mueller et al.
    92                                           
    93                                                   z_mean = torch.cat([tree_mean,mol_mean], dim=1)
    94                                                   z_log_var = torch.cat([tree_log_var,mol_log_var], dim=1)
    95                                                   kl_loss = -0.5 * torch.sum(1.0 + z_log_var - z_mean * z_mean - torch.exp(z_log_var)) / batch_size
    96                                           
    97                                                   epsilon = create_var(torch.randn(batch_size, self.latent_size // 2), False) if e1 is None else e1
    98                                                   tree_vec = tree_mean + torch.exp(tree_log_var // 2) * epsilon
    99                                                   epsilon = create_var(torch.randn(batch_size, self.latent_size // 2), False) if e2 is None else e2
   100                                                   mol_vec = mol_mean + torch.exp(mol_log_var // 2) * epsilon
   101                                                   
   102                                                   word_loss, topo_loss, word_acc, topo_acc = self.decoder(mol_batch, tree_vec)
   103                                                   assm_loss, assm_acc = self.assm(mol_batch, mol_vec, tree_mess)
   104                                                   stereo_loss, stereo_acc = self.stereo(mol_batch, mol_vec)
   105                                           
   106                                                   all_vec = torch.cat([tree_vec, mol_vec], dim=1)
   107                                                   loss = word_loss + topo_loss + assm_loss + 2 * stereo_loss + beta * kl_loss 
   108                                           
   109                                                   return loss, kl_loss.data[0], word_acc, topo_acc, assm_acc, stereo_acc

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: assm at line 111

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   111                                               @profile
   112                                               def assm(self, mol_batch, mol_vec, tree_mess):
   113                                                   cands = []
   114                                                   batch_idx = []
   115                                                   for i,mol_tree in enumerate(mol_batch):
   116                                                       for node in mol_tree.nodes:
   117                                                           #Leaf node's attachment is determined by neighboring node's attachment
   118                                                           if node.is_leaf or len(node.cands) == 1: continue
   119                                                           cands.extend( [(cand, mol_tree.nodes, node) for cand in node.cand_mols] )
   120                                                           batch_idx.extend([i] * len(node.cands))
   121                                           
   122                                                   cand_vec = self.jtmpn(cands, tree_mess)
   123                                                   cand_vec = self.G_mean(cand_vec)
   124                                           
   125                                                   batch_idx = create_var(torch.LongTensor(batch_idx))
   126                                                   mol_vec = mol_vec.index_select(0, batch_idx)
   127                                           
   128                                                   mol_vec = mol_vec.view(-1, 1, self.latent_size // 2)
   129                                                   cand_vec = cand_vec.view(-1, self.latent_size // 2, 1)
   130                                                   scores = torch.bmm(mol_vec, cand_vec).squeeze()
   131                                                   
   132                                                   cnt,tot,acc = 0,0,0
   133                                                   all_loss = []
   134                                                   for i,mol_tree in enumerate(mol_batch):
   135                                                       comp_nodes = [node for node in mol_tree.nodes if len(node.cands) > 1 and not node.is_leaf]
   136                                                       cnt += len(comp_nodes)
   137                                                       for node in comp_nodes:
   138                                                           label = node.cands.index(node.label)
   139                                                           ncand = len(node.cands)
   140                                                           cur_score = scores.narrow(0, tot, ncand)
   141                                                           tot += ncand
   142                                           
   143                                                           if cur_score.data[label] >= cur_score.max().data[0]:
   144                                                               acc += 1
   145                                           
   146                                                           label = create_var(torch.LongTensor([label]))
   147                                                           all_loss.append( self.assm_loss(cur_score.view(1,-1), label) )
   148                                                   
   149                                                   #all_loss = torch.stack(all_loss).sum() / len(mol_batch)
   150                                                   all_loss = sum(all_loss) / len(mol_batch)
   151                                                   return all_loss, acc * 1.0 / cnt

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: stereo at line 153

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   153                                               @profile
   154                                               def stereo(self, mol_batch, mol_vec):
   155                                                   stereo_cands,batch_idx = [],[]
   156                                                   labels = []
   157                                                   for i,mol_tree in enumerate(mol_batch):
   158                                                       cands = mol_tree.stereo_cands
   159                                                       if len(cands) == 1: continue
   160                                                       if mol_tree.smiles3D not in cands:
   161                                                           cands.append(mol_tree.smiles3D)
   162                                                       stereo_cands.extend(cands)
   163                                                       batch_idx.extend([i] * len(cands))
   164                                                       labels.append( (cands.index(mol_tree.smiles3D), len(cands)) )
   165                                           
   166                                                   if len(labels) == 0: 
   167                                                       return create_var(torch.tensor(0.)), 1.0
   168                                           
   169                                                   batch_idx = create_var(torch.LongTensor(batch_idx))
   170                                                   stereo_cands = self.mpn(mol2graph(stereo_cands))
   171                                                   stereo_cands = self.G_mean(stereo_cands)
   172                                                   stereo_labels = mol_vec.index_select(0, batch_idx)
   173                                                   scores = torch.nn.CosineSimilarity()(stereo_cands, stereo_labels)
   174                                           
   175                                                   st,acc = 0,0
   176                                                   all_loss = []
   177                                                   for label,le in labels:
   178                                                       cur_scores = scores.narrow(0, st, le)
   179                                                       if cur_scores.data[label] >= cur_scores.max().data[0]: 
   180                                                           acc += 1
   181                                                       label = create_var(torch.LongTensor([label]))
   182                                                       all_loss.append( self.stereo_loss(cur_scores.view(1,-1), label) )
   183                                                       st += le
   184                                                   #all_loss = torch.cat(all_loss).sum() / len(labels)
   185                                                   all_loss = sum(all_loss) / len(labels)
   186                                                   return all_loss, acc * 1.0 / len(labels)

Total time: 11.0219 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: encode at line 353

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   353                                               @profile
   354                                               def encode(self, mol_batch):
   355        10      55370.0   5537.0      0.5          dgl_set_batch_nodeID(mol_batch, self.vocab)
   356                                           
   357        10        255.0     25.5      0.0          smiles_batch = [mol_tree.smiles for mol_tree in mol_batch]
   358        10    7120579.0 712057.9     64.6          mol_vec = self.mpn(mol2dgl(smiles_batch))
   359                                                   # mol_batch is a junction tree
   360        10    3845709.0 384570.9     34.9          mol_tree_batch, tree_vec = self.jtnn(mol_batch)
   361                                           
   362        10         14.0      1.4      0.0          return mol_tree_batch, tree_vec, mol_vec

Total time: 127.522 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: forward at line 364

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   364                                               @profile
   365                                               def forward(self, mol_batch, beta=0, e1=None, e2=None):
   366        10         34.0      3.4      0.0          batch_size = len(mol_batch)
   367                                           
   368        10   11022159.0 1102215.9      8.6          mol_tree_batch, tree_vec, mol_vec = self.encode(mol_batch)
   369                                           
   370        10       1047.0    104.7      0.0          tree_mean = self.T_mean(tree_vec)
   371        10        835.0     83.5      0.0          tree_log_var = -torch.abs(self.T_var(tree_vec))
   372        10        565.0     56.5      0.0          mol_mean = self.G_mean(mol_vec)
   373        10        719.0     71.9      0.0          mol_log_var = -torch.abs(self.G_var(mol_vec))
   374                                           
   375        10        209.0     20.9      0.0          self.tree_mean = tree_mean
   376        10        109.0     10.9      0.0          self.tree_log_var = tree_log_var
   377        10        113.0     11.3      0.0          self.mol_mean = mol_mean
   378        10        105.0     10.5      0.0          self.mol_log_var = mol_log_var
   379                                           
   380        10        297.0     29.7      0.0          z_mean = torch.cat([tree_mean, mol_mean], dim=1)
   381        10        171.0     17.1      0.0          z_log_var = torch.cat([tree_log_var, mol_log_var], dim=1)
   382        10       1143.0    114.3      0.0          kl_loss = -0.5 * torch.sum(1.0 + z_log_var - z_mean * z_mean - torch.exp(z_log_var)) / batch_size
   383                                           
   384        10        164.0     16.4      0.0          self.z_mean = z_mean
   385        10        105.0     10.5      0.0          self.z_log_var = z_log_var
   386                                           
   387        10        346.0     34.6      0.0          epsilon = torch.randn(batch_size, self.latent_size // 2) if e1 is None else e1
   388        10        579.0     57.9      0.0          tree_vec = tree_mean + torch.exp(tree_log_var // 2) * epsilon
   389        10        206.0     20.6      0.0          epsilon = torch.randn(batch_size, self.latent_size // 2) if e2 is None else e2
   390        10        386.0     38.6      0.0          mol_vec = mol_mean + torch.exp(mol_log_var // 2) * epsilon
   391                                           
   392        10        146.0     14.6      0.0          self.tree_vec = tree_vec
   393        10        106.0     10.6      0.0          self.mol_vec = mol_vec
   394                                           
   395        10    4959075.0 495907.5      3.9          word_loss, topo_loss, word_acc, topo_acc = self.decoder(mol_batch, tree_vec)
   396        10  109502144.0 10950214.4     85.9          assm_loss, assm_acc = self.assm(mol_batch, mol_tree_batch, mol_vec)
   397        10    2029697.0 202969.7      1.6          stereo_loss, stereo_acc = self.stereo(mol_batch, mol_vec)
   398                                           
   399        10        202.0     20.2      0.0          self.word_loss_v = word_loss
   400        10        115.0     11.5      0.0          self.topo_loss_v = topo_loss
   401        10        104.0     10.4      0.0          self.assm_loss_v = assm_loss
   402        10        110.0     11.0      0.0          self.stereo_loss_v = stereo_loss
   403                                           
   404        10        303.0     30.3      0.0          all_vec = torch.cat([tree_vec, mol_vec], dim=1)
   405        10        402.0     40.2      0.0          loss = word_loss + topo_loss + assm_loss + 2 * stereo_loss + beta * kl_loss
   406                                           
   407        10        145.0     14.5      0.0          self.all_vec = all_vec
   408                                           
   409        10         16.0      1.6      0.0          return loss, kl_loss, word_acc, topo_acc, assm_acc, stereo_acc

Total time: 109.444 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: assm at line 411

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   411                                               @profile
   412                                               def assm(self, mol_batch, mol_tree_batch, mol_vec):
   413        10         27.0      2.7      0.0          cands = []
   414        10         16.0      1.6      0.0          batch_idx = []
   415                                           
   416       410        532.0      1.3      0.0          for i, mol_tree in enumerate(mol_batch):
   417      6124      19313.0      3.2      0.0              for node_id, node in mol_tree.nodes.items():
   418      5724       8207.0      1.4      0.0                  if node['is_leaf'] or len(node['cands']) == 1:
   419      2107       2257.0      1.1      0.0                      continue
   420      1686       9162.0      5.4      0.0                  cands.extend([(cand, mol_tree, node_id) for cand in node['cand_mols']])
   421      1686       2922.0      1.7      0.0                  batch_idx.extend([i] * len(node['cands']))
   422                                           
   423        10  109082309.0 10908230.9     99.7          cand_vec = self.jtmpn(cands, mol_tree_batch)
   424        10      31957.0   3195.7      0.0          cand_vec = self.G_mean(cand_vec)
   425                                           
   426        10       1165.0    116.5      0.0          batch_idx = torch.LongTensor(batch_idx)
   427        10       3336.0    333.6      0.0          mol_vec = mol_vec[batch_idx]
   428                                           
   429        10        259.0     25.9      0.0          mol_vec = mol_vec.view(-1, 1, self.latent_size // 2)
   430        10         86.0      8.6      0.0          cand_vec = cand_vec.view(-1, self.latent_size // 2, 1)
   431        10      14487.0   1448.7      0.0          scores = (mol_vec @ cand_vec)[:, 0, 0]
   432                                           
   433        10         34.0      3.4      0.0          cnt, tot, acc = 0, 0, 0
   434        10         28.0      2.8      0.0          all_loss = []
   435       410       1045.0      2.5      0.0          for i, mol_tree in enumerate(mol_batch):
   436       400      34148.0     85.4      0.0              comp_nodes = [node_id for node_id, node in mol_tree.nodes.items()
   437                                                                     if len(node['cands']) > 1 and not node['is_leaf']]
   438       400       1051.0      2.6      0.0              cnt += len(comp_nodes)
   439                                                       # segmented accuracy and cross entropy
   440      2086       4646.0      2.2      0.0              for node_id in comp_nodes:
   441      1686      19347.0     11.5      0.0                  node = mol_tree.nodes[node_id]
   442      1686       7188.0      4.3      0.0                  label = node['cands'].index(node['label'])
   443      1686       3495.0      2.1      0.0                  ncand = len(node['cands'])
   444      1686      18177.0     10.8      0.0                  cur_score = scores[tot:tot+ncand]
   445      1686       2857.0      1.7      0.0                  tot += ncand
   446                                           
   447      1686      35566.0     21.1      0.0                  if cur_score[label].item() >= cur_score.max().item():
   448       535        928.0      1.7      0.0                      acc += 1
   449                                           
   450      1686      18306.0     10.9      0.0                  label = torch.LongTensor([label])
   451      1686       2730.0      1.6      0.0                  all_loss.append(
   452      1686     108361.0     64.3      0.1                      F.cross_entropy(cur_score.view(1, -1), label, size_average=False))
   453                                           
   454        10       9523.0    952.3      0.0          all_loss = sum(all_loss) / len(mol_batch)
   455        10         60.0      6.0      0.0          return all_loss, acc / cnt

Total time: 2.02637 s
File: /home/gq/ML/icml18-jtnn/jtnn/jtnn_vae.py
Function: stereo at line 457

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   457                                               @profile
   458                                               def stereo(self, mol_batch, mol_vec):
   459        10         26.0      2.6      0.0          stereo_cands, batch_idx = [], []
   460        10         22.0      2.2      0.0          labels = []
   461       410        647.0      1.6      0.0          for i, mol_tree in enumerate(mol_batch):
   462       400        785.0      2.0      0.0              cands = mol_tree.stereo_cands
   463       400        673.0      1.7      0.0              if len(cands) == 1:
   464       372        482.0      1.3      0.0                  continue
   465        28         76.0      2.7      0.0              if mol_tree.smiles3D not in cands:
   466                                                           cands.append(mol_tree.smiles3D)
   467        28         81.0      2.9      0.0              stereo_cands.extend(cands)
   468        28        132.0      4.7      0.0              batch_idx.extend([i] * len(cands))
   469        28        120.0      4.3      0.0              labels.append((cands.index(mol_tree.smiles3D), len(cands)))
   470                                           
   471        10         20.0      2.0      0.0          if len(labels) == 0:
   472                                                       # Only one stereoisomer exists; do nothing
   473                                                       return torch.tensor(0.), 1.
   474                                           
   475        10        272.0     27.2      0.0          batch_idx = torch.LongTensor(batch_idx)
   476        10    2016586.0 201658.6     99.5          stereo_cands = self.mpn(mol2dgl(stereo_cands))
   477        10       1113.0    111.3      0.1          stereo_cands = self.G_mean(stereo_cands)
   478        10        944.0     94.4      0.0          stereo_labels = mol_vec[batch_idx]
   479        10       1095.0    109.5      0.1          scores = F.cosine_similarity(stereo_cands, stereo_labels)
   480                                           
   481        10         14.0      1.4      0.0          st, acc = 0, 0
   482        10         15.0      1.5      0.0          all_loss = []
   483        38         62.0      1.6      0.0          for label, le in labels:
   484        28        207.0      7.4      0.0              cur_scores = scores[st:st+le]
   485        28        526.0     18.8      0.0              if cur_scores.data[label].item() >= cur_scores.max().item():
   486        12         19.0      1.6      0.0                  acc += 1
   487        28        261.0      9.3      0.0              label = torch.LongTensor([label])
   488        28         37.0      1.3      0.0              all_loss.append(
   489        28       1698.0     60.6      0.1                  F.cross_entropy(cur_scores.view(1, -1), label, size_average=False))
   490        28         49.0      1.8      0.0              st += le
   491                                           
   492        10        389.0     38.9      0.0          all_loss = sum(all_loss) / len(labels)
   493        10         22.0      2.2      0.0          return all_loss, acc / len(labels)

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: mol2graph at line 38

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                           @profile
    39                                           def mol2graph(mol_batch):
    40                                               padding = torch.zeros(ATOM_FDIM + BOND_FDIM)
    41                                               fatoms,fbonds = [],[padding] #Ensure bond is 1-indexed
    42                                               in_bonds,all_bonds = [],[(-1,-1)] #Ensure bond is 1-indexed
    43                                               scope = []
    44                                               total_atoms = 0
    45                                           
    46                                               for smiles in mol_batch:
    47                                                   mol = get_mol(smiles)
    48                                                   #mol = Chem.MolFromSmiles(smiles)
    49                                                   n_atoms = mol.GetNumAtoms()
    50                                                   for atom in mol.GetAtoms():
    51                                                       fatoms.append( atom_features(atom) )
    52                                                       in_bonds.append([])
    53                                           
    54                                                   for bond in mol.GetBonds():
    55                                                       a1 = bond.GetBeginAtom()
    56                                                       a2 = bond.GetEndAtom()
    57                                                       x = a1.GetIdx() + total_atoms
    58                                                       y = a2.GetIdx() + total_atoms
    59                                           
    60                                                       b = len(all_bonds) 
    61                                                       all_bonds.append((x,y))
    62                                                       fbonds.append( torch.cat([fatoms[x], bond_features(bond)], 0) )
    63                                                       in_bonds[y].append(b)
    64                                           
    65                                                       b = len(all_bonds)
    66                                                       all_bonds.append((y,x))
    67                                                       fbonds.append( torch.cat([fatoms[y], bond_features(bond)], 0) )
    68                                                       in_bonds[x].append(b)
    69                                                   
    70                                                   scope.append((total_atoms,n_atoms))
    71                                                   total_atoms += n_atoms
    72                                           
    73                                               total_bonds = len(all_bonds)
    74                                               fatoms = torch.stack(fatoms, 0)
    75                                               fbonds = torch.stack(fbonds, 0)
    76                                               agraph = torch.zeros(total_atoms,MAX_NB).long()
    77                                               bgraph = torch.zeros(total_bonds,MAX_NB).long()
    78                                           
    79                                               for a in range(total_atoms):
    80                                                   for i,b in enumerate(in_bonds[a]):
    81                                                       agraph[a,i] = b
    82                                           
    83                                               for b1 in range(1, total_bonds):
    84                                                   x,y = all_bonds[b1]
    85                                                   for i,b2 in enumerate(in_bonds[x]):
    86                                                       if all_bonds[b2][0] != y:
    87                                                           bgraph[b1,i] = b2
    88                                           
    89                                               return fatoms, fbonds, agraph, bgraph, scope

Total time: 2.62691 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: mol2dgl at line 91

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    91                                           @profile
    92                                           def mol2dgl(smiles_batch):
    93        20         27.0      1.4      0.0      n_nodes = 0
    94        20         20.0      1.0      0.0      graph_list = []
    95       536        652.0      1.2      0.0      for smiles in smiles_batch:
    96       516      10118.0     19.6      0.4          atom_feature_list = []
    97       516       7988.0     15.5      0.3          bond_feature_list = []
    98       516        469.0      0.9      0.0          bond_source_feature_list = []
    99       516      23024.0     44.6      0.9          graph = DGLGraph()
   100       516     169555.0    328.6      6.5          mol = get_mol(smiles)
   101     12452     131550.0     10.6      5.0          for atom in mol.GetAtoms():
   102     11936     513820.0     43.0     19.6              graph.add_node(atom.GetIdx())
   103     11936     797020.0     66.8     30.3              atom_feature_list.append(atom_features(atom))
   104     13349     134199.0     10.1      5.1          for bond in mol.GetBonds():
   105     12833      30815.0      2.4      1.2              begin_idx = bond.GetBeginAtom().GetIdx()
   106     12833      24872.0      1.9      0.9              end_idx = bond.GetEndAtom().GetIdx()
   107     12833     207836.0     16.2      7.9              features = bond_features(bond)
   108     12833     195406.0     15.2      7.4              graph.add_edge(begin_idx, end_idx)
   109     12833      11930.0      0.9      0.5              bond_feature_list.append(features)
   110                                                       # set up the reverse direction
   111     12833     159555.0     12.4      6.1              graph.add_edge(end_idx, begin_idx)
   112     12833      11454.0      0.9      0.4              bond_feature_list.append(features)
   113                                           
   114       516      32783.0     63.5      1.2          atom_x = torch.stack(atom_feature_list)
   115       516      33083.0     64.1      1.3          graph.set_n_repr({'x': atom_x})
   116       516        783.0      1.5      0.0          if len(bond_feature_list) > 0:
   117       516      36302.0     70.4      1.4              bond_x = torch.stack(bond_feature_list)
   118       516        823.0      1.6      0.0              graph.set_e_repr({
   119       516        360.0      0.7      0.0                  'x': bond_x,
   120       516      91420.0    177.2      3.5                  'src_x': atom_x.new(len(bond_feature_list), ATOM_FDIM).zero_()
   121                                                       })
   122       516       1036.0      2.0      0.0          graph_list.append(graph)
   123                                           
   124        20         11.0      0.6      0.0      return graph_list

Total time: 0 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: forward at line 138

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   138                                               @profile
   139                                               def forward(self, mol_graph):
   140                                                   fatoms,fbonds,agraph,bgraph,scope = mol_graph
   141                                                   fatoms = create_var(fatoms)
   142                                                   fbonds = create_var(fbonds)
   143                                                   agraph = create_var(agraph)
   144                                                   bgraph = create_var(bgraph)
   145                                           
   146                                                   binput = self.W_i(fbonds)
   147                                                   message = nn.ReLU()(binput)
   148                                           
   149                                                   for i in range(self.depth - 1):
   150                                                       nei_message = index_select_ND(message, 0, bgraph)
   151                                                       nei_message = nei_message.sum(dim=1)
   152                                                       nei_message = self.W_h(nei_message)
   153                                                       message = nn.ReLU()(binput + nei_message)
   154                                           
   155                                                   nei_message = index_select_ND(message, 0, agraph)
   156                                                   nei_message = nei_message.sum(dim=1)
   157                                                   ainput = torch.cat([fatoms, nei_message], dim=1)
   158                                                   atom_hiddens = nn.ReLU()(self.W_o(ainput))
   159                                                   
   160                                                   mol_vecs = []
   161                                                   for st,le in scope:
   162                                                       mol_vec = atom_hiddens.narrow(0, st, le).sum(dim=0) / le
   163                                                       mol_vecs.append(mol_vec)
   164                                           
   165                                                   mol_vecs = torch.stack(mol_vecs, dim=0)
   166                                                   return mol_vecs

Total time: 6.38904 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: forward at line 230

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   230                                               @profile
   231                                               def forward(self, mol_graph_list):
   232        20     675390.0  33769.5     10.6          mol_graph = batch(mol_graph_list)
   233        20    5117848.0 255892.4     80.1          mol_line_graph = line_graph(mol_graph, no_backtracking=True)
   234        20     471455.0  23572.8      7.4          mol_graph = self.run(mol_graph, mol_line_graph)
   235        20      92996.0   4649.8      1.5          mol_graph_list = unbatch(mol_graph)
   236        20      31318.0   1565.9      0.5          g_repr = torch.stack([g.get_n_repr()['h'].mean(0) for g in mol_graph_list], 0)
   237                                           
   238        20         36.0      1.8      0.0          return g_repr

Total time: 0.469709 s
File: /home/gq/ML/icml18-jtnn/jtnn/mpn.py
Function: run at line 240

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   240                                               @profile
   241                                               def run(self, mol_graph, mol_line_graph):
   242        20        319.0     15.9      0.1          n_nodes = len(mol_graph.nodes)
   243                                           
   244        20         56.0      2.8      0.0          mol_graph.update_edge(
   245        20      50911.0   2545.6     10.8              *zip(*mol_graph.edge_list),
   246        20       2356.0    117.8      0.5              lambda src, dst, edge: {'src_x': src['x']},
   247        20      66289.0   3314.4     14.1              batchable=True,
   248                                                   )
   249                                           
   250        20       1110.0     55.5      0.2          bond_features = mol_line_graph.get_n_repr()['x']
   251        20        626.0     31.3      0.1          source_features = mol_line_graph.get_n_repr()['src_x']
   252                                           
   253        20       2656.0    132.8      0.6          features = torch.cat([source_features, bond_features], 1)
   254        20       9407.0    470.4      2.0          msg_input = self.W_i(features)
   255        20         70.0      3.5      0.0          mol_line_graph.set_n_repr({
   256        20         25.0      1.2      0.0              'msg_input': msg_input,
   257        20       8926.0    446.3      1.9              'msg': F.relu(msg_input),
   258        20       4851.0    242.6      1.0              'accum_msg': torch.zeros_like(msg_input),
   259                                                   })
   260        20         54.0      2.7      0.0          mol_graph.set_n_repr({
   261        20       1545.0     77.2      0.3              'm': bond_features.new(n_nodes, self.hidden_size).zero_(),
   262        20       2476.0    123.8      0.5              'h': bond_features.new(n_nodes, self.hidden_size).zero_(),
   263                                                   })
   264                                           
   265        60        221.0      3.7      0.0          for i in range(self.depth - 1):
   266        40         65.0      1.6      0.0              mol_line_graph.update_all(
   267        40         53.0      1.3      0.0                  mpn_loopy_bp_msg,
   268        40         57.0      1.4      0.0                  mpn_loopy_bp_reduce,
   269        40        470.0     11.8      0.1                  self.loopy_bp_updater,
   270        40     142763.0   3569.1     30.4                  True
   271                                                       )
   272                                           
   273        20         40.0      2.0      0.0          mol_graph.update_all(
   274        20         28.0      1.4      0.0              mpn_gather_msg,
   275        20         23.0      1.1      0.0              mpn_gather_reduce,
   276        20        223.0     11.2      0.0              self.gather_updater,
   277        20     174037.0   8701.9     37.1              True
   278                                                   )
   279                                           
   280        20         52.0      2.6      0.0          return mol_graph

Total time: 272.122 s
File: molvae/vaetrain_dgl.py
Function: train at line 63

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    63                                           @profile
    64                                           def train():
    65         2          8.0      4.0      0.0      for epoch in range(MAX_EPOCH):
    66         1         56.0     56.0      0.0          dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=0, collate_fn=lambda x:x, drop_last=True)
    67                                           
    68         1          1.0      1.0      0.0          word_acc,topo_acc,assm_acc,steo_acc = 0,0,0,0
    69                                           
    70        11  135982754.0 12362068.5     50.0          for it, batch in enumerate(dataloader):
    71       410        506.0      1.2      0.0              for mol_tree in batch:
    72      6124      19233.0      3.1      0.0                  for node_id, node in mol_tree.nodes.items():
    73      5724      10318.0      1.8      0.0                      if node['label'] not in node['cands']:
    74         3          6.0      2.0      0.0                          node['cands'].append(node['label'])
    75         3          4.0      1.3      0.0                          node['cand_mols'].append(node['label_mol'])
    76                                           
    77        10      13931.0   1393.1      0.0              model.zero_grad()
    78        10  127566565.0 12756656.5     46.9              loss, kl_div, wacc, tacc, sacc, dacc = model(batch, beta)
    79        10    8286047.0 828604.7      3.0              loss.backward()
    80        10     235373.0  23537.3      0.1              optimizer.step()
    81                                           
    82        10        117.0     11.7      0.0              word_acc += wacc
    83        10         52.0      5.2      0.0              topo_acc += tacc
    84        10         21.0      2.1      0.0              assm_acc += sacc
    85        10         17.0      1.7      0.0              steo_acc += dacc
    86                                           
    87        10         31.0      3.1      0.0              if (it + 1) % PRINT_ITER == 0:
    88                                                           word_acc = word_acc / PRINT_ITER * 100
    89                                                           topo_acc = topo_acc / PRINT_ITER * 100
    90                                                           assm_acc = assm_acc / PRINT_ITER * 100
    91                                                           steo_acc = steo_acc / PRINT_ITER * 100
    92                                           
    93                                                           print("KL: %.1f, Word: %.2f, Topo: %.2f, Assm: %.2f, Steo: %.2f" % (kl_div, word_acc, topo_acc, assm_acc, steo_acc))
    94                                                           word_acc,topo_acc,assm_acc,steo_acc = 0,0,0,0
    95                                                           sys.stdout.flush()
    96                                           
    97        10         17.0      1.7      0.0              if (it + 1) % 1500 == 0: #Fast annealing
    98                                                           scheduler.step()
    99                                                           print("learning rate: %.6f" % scheduler.get_lr()[0])
   100                                                           torch.save(model.state_dict(), opts.save_path + "/model.iter-%d-%d" % (epoch, it + 1))
   101                                           
   102         1         22.0     22.0      0.0          scheduler.step()
   103         1         42.0     42.0      0.0          print("learning rate: %.6f" % scheduler.get_lr()[0])
   104         1       6701.0   6701.0      0.0          torch.save(model.state_dict(), opts.save_path + "/model.iter-" + str(epoch))

